<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式转义自字符在Hive+Shell中的特殊注意</title>
      <link href="/2019/09/14/hive-shell%E6%AD%A3%E5%88%99%E8%BD%AC%E4%B9%89/"/>
      <url>/2019/09/14/hive-shell%E6%AD%A3%E5%88%99%E8%BD%AC%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h2 id="hive中"><a href="#hive中" class="headerlink" title="hive中"></a>hive中</h2><ul><li>正则表达式的转移字符为<em>双斜线“\\”</em></li><li>spilt(string str, string pat),分割符pat为正则表达式<ul><li>待分割字符串：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> positions <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>使用分割符“|”分割开</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(positions,<span class="string">'|'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure><p>发现，“|”也作为列表的一部分。这是因为，之间使用‘|’被默认为正则表达式中的或，而不会被作为分隔符使用，这时，分隔符为空，所以split函数将字段<em>positions</em>中的单个字符全部分隔开。</p><blockquote><p>使用“\\”转义字符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(positions,<span class="string">'\\|'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure><blockquote><p>在“[]”中拼接处字符串<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(positions,<span class="string">'[|]'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="转义“转义字符”"><a href="#转义“转义字符”" class="headerlink" title="转义“转义字符”"></a>转义“转义字符”</h2><ul><li>有时候，在一些特殊情况下，需要对’&#39;进行转义，会出现两个’\\‘或者四个’\\\\‘转义字符</li><li></li></ul><ol><li>hive的split函数和正则表达式<blockquote><p>当以“\”作为分隔符的话，那么就需要使用四个斜线“\\”，</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(<span class="string">'a\b\c'</span>,<span class="string">'\\\\'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>hive语句在shell脚本中执行<blockquote><p>shell中’&#39;是特殊字符，也需要转义，shell的转义字符是一个”&quot;。<br>hive 语句在shell脚本中执行时，就需要由shell转义后，再由hive执行。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">SQL="</span><br><span class="line">select split(positions,'\\|') from [表名] where [分区条件];</span><br><span class="line">"</span><br><span class="line">echo -e '$&#123;SQL&#125;'</span><br><span class="line">hive -e '$&#123;SQL&#125;'</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则转义,hive,shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计文件行数</title>
      <link href="/2019/09/14/%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E8%A1%8C%E6%95%B0/"/>
      <url>/2019/09/14/%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E8%A1%8C%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>今天做一个报表需求，供算法团队使用，想和旧数据比较量级，就学习一些linux的一些语法操作。总结记录，下次直接用。</p><h2 id="使用awk的特殊变量"><a href="#使用awk的特殊变量" class="headerlink" title="使用awk的特殊变量"></a>使用awk的特殊变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;print NR&#125;' 文件名 | tail -n1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk 'END&#123;print NR&#125;' 文件名</span><br></pre></td></tr></table></figure><h2 id="使用grep列出行号"><a href="#使用grep列出行号" class="headerlink" title="使用grep列出行号"></a>使用grep列出行号</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n '' 文件名 | awk -F : 'print $1' | tail -n1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n '' 文件名 | awk -F : 'END&#123;print $1&#125;'</span><br></pre></td></tr></table></figure><h2 id="使用sed流编辑-n"><a href="#使用sed流编辑-n" class="headerlink" title="使用sed流编辑-n"></a>使用sed流编辑-n</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n '$=' 文件名</span><br></pre></td></tr></table></figure><p>-解释： sed -n ‘$=’, “$”命令到最后一行，”=”打印行号</p><h2 id="使用wc命令"><a href="#使用wc命令" class="headerlink" title="使用wc命令"></a>使用wc命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 文件名|wc -l</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l 文件名|awk '&#123;print $1&#125;'</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“剑指Offer-数组”</title>
      <link href="/2019/09/14/%E2%80%9C%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E2%80%9D/"/>
      <url>/2019/09/14/%E2%80%9C%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="题目一：-找出数组中重复的数字"><a href="#题目一：-找出数组中重复的数字" class="headerlink" title="题目一： 找出数组中重复的数字"></a>题目一： 找出数组中重复的数字</h2><p>在一个<span style="border-bottom:2px dashed green;"><strong>长度为n的数组里所有的数字都在0～n-1的范围内</strong></span>。数组中某些数字是重复的，但不知道有几个数字重复了,也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2,3,1,0,2,5,3},那么对应的输出是重复的数字2或者3。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol><li>使用哈希表。<blockquote><p><font color="Green">如果哈希表里没有这个数字，就把它加入哈希表，如果哈希表里已经存在该数字，就找到一个重复的数字。</font><br><font color="Blue">时间复杂度O(n)；空间复杂度O(n)。</font></p></blockquote></li><li>注意到题目画绿线部分的特殊性。<blockquote><p><font color="Green">特别的：如果这个数组没有重复数字，那么当数组排序之后数字i将出现在下标为i的位置。</font></p></blockquote></li></ol><ul><li>重排序数组，从头到尾扫描数组中的每个数字</li><li>当扫描到下标为i的数组时，首先比较这个数字（m）是否等于下标 i</li><li>如果是，则扫描下一个数字；</li><li>否则，拿数字m和数组第m个数字进行比较。如果它和m相等，找到重复数字。如果不等，就将数组第i个数字与数组第m个数字交换位置。</li><li>重复比较、交换，直到发现重复数字。</li></ul><p><font color="Blue">时间复杂度O(n),空间复杂度O(1)。</font></p><ul><li><p>C++代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers == <span class="literal">nullptr</span> || length &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;                                 <span class="comment">//判断数组是否为空</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length ; i++)          <span class="comment">//判断数组元素是否满足题目要求</span></span><br><span class="line"><span class="keyword">if</span>(numbers[i] &lt; <span class="number">0</span> || numbers[i] &gt;= length) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(numbers[i] != i)        <span class="comment">//判断第i个元素与下标是否相等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers[i] == numbers[numbers[i]])      <span class="comment">//m等于第m个元素的值，找到重复数字</span></span><br><span class="line">&#123;</span><br><span class="line">*duplication = numbers[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">swap(numbers[i],numbers[numbers[i]]);       <span class="comment">//交换数组第i个数字和第m个数字</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">duplicate</span><span class="params">(a,dup)</span>:</span></span><br><span class="line">    long = len(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(long):</span><br><span class="line">        <span class="keyword">while</span> i != a[i]:</span><br><span class="line">            x =a [i]</span><br><span class="line">            <span class="keyword">if</span> x == a[x]:</span><br><span class="line">                dup[<span class="number">0</span>] = x</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            a[i], a[x] = a[x], a[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>测试：<br><img src="/.com//_posts/%E2%80%9C%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E2%80%9D/test1.png" alt="test1"></p><img src="/.com//09/14/“剑指Offer-数组”/test1.png" title="This is an example image"></li></ul><h2 id="题目二：不修改数组找出重复的数字"><a href="#题目二：不修改数组找出重复的数字" class="headerlink" title="题目二：不修改数组找出重复的数字"></a>题目二：不修改数组找出重复的数字</h2><p>在<span style="border-bottom:2px dashed green;"><strong>一个长度为n+1的数组里的所有数字都在1～n的范围内，所以数组中至少有一个数字是重复的</strong></span>。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2,3,5,4,3,2,6,7},那么对应的输出是重复的数字2或3。</p><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>这个题目和题目一的区别就是，不能修改原数组。</p><ol><li>复制数组，使用O(n)的辅助空间。</li><li>如果不修改数组，其实就是限制你对数组的权限是只读，也就是查找数组。如果只能查找数组，就可以利用<font color="Green">二分查找的思想。再利用题目的特殊性，如果没有重复数字，数组中元组值在1～n的数字一定只有n个，由于数组包含&gt;n个元素，所以一定包含重复数字，接下来就不断缩小包含的重复数字的数组范围。</font></li></ol><ul><li><p>把1～n的数字折半中间数字索引为m，前一半1～m，后一半m+1~n。</p></li><li><p>判断：如果1～m的数字数目超过m，那么这一半的区间里一定包含重复数字；<br>否则，就是另一半。</p></li><li><p>重复，直到找到重复的数字。<strong>（过程比较二分查找，就是多了一个统计区间中数字的数目）</strong><br><font color="Blue"> 时间复杂度O(log n), 空间复杂度O(1)</font></p></li><li><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countRange</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> * numbers, <span class="keyword">int</span> length, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers == <span class="literal">nullptr</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line"><span class="keyword">if</span>(numbers[i] &gt;= start &amp;&amp; numbers[i] &lt;= end)</span><br><span class="line">count ++;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDuplication</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> * numbers, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers == <span class="literal">nullptr</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>;            <span class="comment">//初始化查找区间范围</span></span><br><span class="line"><span class="keyword">int</span> end = length <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(start &lt;= end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = ((end -start)&gt;&gt;<span class="number">1</span>) +start;  <span class="comment">//折半中间</span></span><br><span class="line"><span class="keyword">int</span> count = countRange(numbers, length, start,middle)   <span class="comment">//从start-middle左半开始统计个数</span></span><br><span class="line"><span class="keyword">if</span>(end == start)    <span class="comment">//折半到最小区间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">1</span>)   <span class="comment">//重复数字</span></span><br><span class="line"><span class="keyword">return</span> start;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count &gt; (middle-start + <span class="number">1</span>))     <span class="comment">//重复数字在左半部分，继续查找</span></span><br><span class="line">end = middle;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">start = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">countRange</span><span class="params">(self,numbers, length, start, end)</span>:</span>   <span class="comment">#计数</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">            <span class="keyword">if</span> numbers[i] &gt;= start <span class="keyword">and</span> numbers[i] &lt;= end:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDuplication</span><span class="params">(self,numbers)</span>:</span></span><br><span class="line">        length = len(numbers)</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = length <span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> end &gt;= start:</span><br><span class="line">            middle = ((end-start)&gt;&gt;<span class="number">1</span>) + start</span><br><span class="line">            count = self.countRange(numbers, length, start, middle)</span><br><span class="line">            <span class="keyword">if</span> start == end:</span><br><span class="line">                <span class="keyword">if</span> count &gt; <span class="number">1</span>: </span><br><span class="line">                    <span class="keyword">return</span> start</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; (middle - start ) + <span class="number">1</span> :</span><br><span class="line">                end = middle</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                start = middle + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">ss = Solution()</span><br><span class="line">lst = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">ss.getDuplication(lst)</span><br></pre></td></tr></table></figure></li></ul><h2 id="题目三：-二维数组中的查找"><a href="#题目三：-二维数组中的查找" class="headerlink" title="题目三： 二维数组中的查找"></a>题目三： 二维数组中的查找</h2><p>在一个二维数组中，<span style="border-bottom:2px dashed green;">每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序</span>。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>利用二维数组是一个特殊有序的二维数组，通过查找一个数不断缩小查找范围的思想（类似二分查找的思想），选择中间值，比较然后缩小范围。<br>中间值：一位数组通常是折半。二维数组可以找右上角，左边的数字都小于右上角数字，下边的数字都大于右上角数字。</p><ul><li><p>选取数组中右上角的数字。</p></li><li><p>如果该数字等于要查找的数字，则查找过程结束；</p></li><li><p>如果该数字大于要查找的数字，则剔除这个数字所在的列；</p></li><li><p>如果该数字小于要查找的数字，则剔除这个数字所在的行。</p></li><li><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> *matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">0</span>, col = cols <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(row &lt; rows &amp;&amp; col &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[row*cols + col] == num)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(matrix[row*cols+col] &gt; num)</span><br><span class="line">col--;                                             <span class="comment">//剔除所在列</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">row++;                                           <span class="comment">//剔除所在行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> found;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>-Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(matrix,num)</span>:</span></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    col = len(matrix[<span class="number">0</span>])<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> matrix == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> row &lt; len(matrix) <span class="keyword">and</span> col &gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> matrix[row][col] == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> matrix[row][col] &gt; num:</span><br><span class="line">            col -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer, 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac删除GlobalProtect</title>
      <link href="/2019/09/10/mac%E5%88%A0%E9%99%A4GlobalProtect/"/>
      <url>/2019/09/10/mac%E5%88%A0%E9%99%A4GlobalProtect/</url>
      
        <content type="html"><![CDATA[<h4 id="之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。"><a href="#之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。" class="headerlink" title="之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。"></a>之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。</h4><ol><li>打开终端</li><li>输入终端命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/GlobalProtect.app/Contents/Resources/uninstall_gp.sh</span><br></pre></td></tr></table></figure></li></ol><p>3.完成删除。</p>]]></content>
      
      
      <categories>
          
          <category> install &amp;&amp; uninstall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
