<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初始化git远程仓库</title>
      <link href="/2021/01/28/%E5%88%9D%E5%A7%8B%E5%8C%96git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2021/01/28/%E5%88%9D%E5%A7%8B%E5%8C%96git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="登陆gitee，添加公钥"><a href="#登陆gitee，添加公钥" class="headerlink" title="登陆gitee，添加公钥"></a>登陆gitee，添加公钥</h3><p>查看公钥的方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="在电脑终端授权"><a href="#在电脑终端授权" class="headerlink" title="在电脑终端授权"></a>在电脑终端授权</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><p>看的回复 successful authenticated，说明连接成功。</p><h3 id="在gitee上新建仓库后，进行如下配置"><a href="#在gitee上新建仓库后，进行如下配置" class="headerlink" title="在gitee上新建仓库后，进行如下配置"></a>在gitee上新建仓库后，进行如下配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "super_moon"</span><br><span class="line">git config --global user.email "xxxin_yue@163.com"</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI使用</title>
      <link href="/2021/01/28/ElementUI%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/01/28/ElementUI%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="官方首页网址"><a href="#官方首页网址" class="headerlink" title="官方首页网址"></a>官方首页网址</h3><p><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">https://element.eleme.cn/#/zh-CN</a></p><h3 id="命令行方式手动安装方法："><a href="#命令行方式手动安装方法：" class="headerlink" title="命令行方式手动安装方法："></a>命令行方式手动安装方法：</h3><ol><li>安装依赖包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure><ol start="2"><li>在文件src/index.js入口文件中导入Element-UI相关资源</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入组件库</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="comment">// 导入组件相关样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="comment">//配置Vue插件</span></span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure><ol start="3"><li>在.vue文件中使用相关组件即可</li></ol><h3 id="基于图形化界面自动安装"><a href="#基于图形化界面自动安装" class="headerlink" title="基于图形化界面自动安装"></a>基于图形化界面自动安装</h3><ol><li>运行vue ui命令，打开图形化界面</li><li>通过Vue项目管理器，进入具体的项目配置面板</li><li>点击 插件 -&gt; 添加插件， 进入插件查询面板</li><li>搜索 vue-cli-plugin-element并安装</li><li>配置插件，实现按需导入，从而减少打包后项目的体积</li></ol>]]></content>
      
      
      <categories>
          
          <category> 组件库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue项目配置</title>
      <link href="/2021/01/28/vue%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/01/28/vue%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="vue安装，创建项目"><a href="#vue安装，创建项目" class="headerlink" title="vue安装，创建项目"></a>vue安装，创建项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue create (项目名)</span><br><span class="line">cd (项目名)</span><br></pre></td></tr></table></figure><ul><li>项目根目录下创建vue.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        open: <span class="literal">true</span>, <span class="comment">//自动打开浏览器</span></span><br><span class="line">        port: <span class="number">8878</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue基本使用</title>
      <link href="/2021/01/27/vue%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/01/27/vue%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="computed-amp-watch"><a href="#computed-amp-watch" class="headerlink" title="computed &amp; watch"></a>computed &amp; watch</h3><ul><li>computed有缓存，data不变则不会重新计算</li><li>watch如何深度监听？<ul><li>watch监听引用类型，拿不到oldVal</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack&amp;babel使用</title>
      <link href="/2021/01/27/webpack-babel%E7%94%A8%E6%B3%95/"/>
      <url>/2021/01/27/webpack-babel%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>#Webpack</p><p>###初始化node环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h3 id="建立src-index-js"><a href="#建立src-index-js" class="headerlink" title="建立src/index.js"></a>建立src/index.js</h3><h3 id="建立webpack-config-js"><a href="#建立webpack-config-js" class="headerlink" title="建立webpack.config.js"></a>建立webpack.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)   <span class="comment">//引入node.js的path模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">node: <span class="string">'development'</span>,   <span class="comment">// production</span></span><br><span class="line">entry: path.join(__dirname, <span class="string">'src'</span>, <span class="string">'index.js'</span>),    <span class="comment">// __dirname是根目录</span></span><br><span class="line">output: &#123;</span><br><span class="line">filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">path: path.join(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行-（配置webpack-json）"><a href="#运行-（配置webpack-json）" class="headerlink" title="运行 （配置webpack.json）"></a>运行 （配置webpack.json）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scirpts"</span>: &#123;</span><br><span class="line"><span class="string">"test"</span>:,</span><br><span class="line"><span class="string">"build"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="建立src-index-html"><a href="#建立src-index-html" class="headerlink" title="建立src/index.html"></a>建立src/index.html</h3><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br><span class="line">npm install webpack-web-server -D   //监控代码更新并且响应</span><br></pre></td></tr></table></figure><h3 id="配置webpack-config-js"><a href="#配置webpack-config-js" class="headerlink" title="配置webpack.config.js"></a>配置webpack.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// output平级</span></span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: path.join(__dirname, <span class="string">'src'</span>, <span class="string">'index.html'</span>),</span><br><span class="line">    filename: <span class="string">'index.html'</span></span><br><span class="line">  &#125;)</span><br><span class="line">],</span><br><span class="line">devServer: &#123;</span><br><span class="line">  port: <span class="number">3000</span>,</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'src'</span>, <span class="string">'index.html'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置webpack-json）"><a href="#配置webpack-json）" class="headerlink" title="配置webpack.json）"></a>配置webpack.json）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scirpts"</span>: &#123;</span><br><span class="line"><span class="string">"test"</span>:,</span><br><span class="line"><span class="string">"build"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack-dev-server"</span>  <span class="comment">//开发</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1><h3 id="安装babel"><a href="#安装babel" class="headerlink" title="安装babel"></a>安装babel</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core @babel/preset-env babel-loader -D  //@表示组， /中间模块</span><br></pre></td></tr></table></figure><h4 id="创建-babelrc"><a href="#创建-babelrc" class="headerlink" title="创建.babelrc"></a>创建.babelrc</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"babel/preset-env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// output 同级</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: [<span class="string">'babel-loader'</span>]</span><br><span class="line">      include: path.join(__dirname, <span class="string">'src'</span>),</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生成环境"><a href="#生成环境" class="headerlink" title="生成环境"></a>生成环境</h1><h3 id="创建webpack-prod-js"><a href="#创建webpack-prod-js" class="headerlink" title="创建webpack.prod.js"></a>创建webpack.prod.js</h3><p>把webpack.config.js复制过来到webpack.prod.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)   <span class="comment">//引入node.js的path模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">node: <span class="string">'development'</span>,   <span class="comment">// production</span></span><br><span class="line">entry: path.join(__dirname, <span class="string">'src'</span>, <span class="string">'index.js'</span>),    <span class="comment">// __dirname是根目录</span></span><br><span class="line">output: &#123;</span><br><span class="line">filename: <span class="string">'bundle.[contenthash].js'</span>,   <span class="comment">//算出一个hash值，只要代码变hash值就变</span></span><br><span class="line">path: path.join(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build: <span class="string">"webpack --config webpack.prod.js"</span></span><br></pre></td></tr></table></figure><h3 id="删除旧dist，运行"><a href="#删除旧dist，运行" class="headerlink" title="删除旧dist，运行"></a>删除旧dist，运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 打包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript迭代器的含义与用法详解</title>
      <link href="/2020/11/11/javaScript%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%90%AB%E4%B9%89%E4%B8%8E%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/11/11/javaScript%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%90%AB%E4%B9%89%E4%B8%8E%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>​    正在阅读《学习JavaScript数据结构与算法》，在学习数据结构的时候，最常见到的词就是迭代器了，在《你不知道的JavaScript（上篇）》中对象的介绍，也讲了如果对对象自定义迭代器，所以我觉得如果想要更熟悉JavaScirpt数据结构，深入了解迭代器很有必要。</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><h4 id="迭代器是什么（来自我内心的问号）"><a href="#迭代器是什么（来自我内心的问号）" class="headerlink" title="迭代器是什么（来自我内心的问号）"></a>迭代器是什么（来自我内心的问号）</h4><blockquote><p>迭代器就是为实现不同几何进行统一遍历操作的一种机制，只要给需要遍历的数据结构部署Iterator接口，通过调用该接口，或者使用消耗该接口的API实现遍历操作。</p></blockquote><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><blockquote><p>迭代器模式，提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。</p></blockquote><p>在前端工作中，数据可视化工作是必要的，后端传来的数据结构多样，有map,set等，JavaScirpt原有的由一堆元素组成的数据结构，包括数组（Array）、对象(Object)，以及ES6(ESCM2015)新加入的Map和Set，数据结构变化多样，如果想要遍历他们，一个统一的标准化遍历操作是必要的，所以就产生了迭代器。</p><h4 id="迭代器分类"><a href="#迭代器分类" class="headerlink" title="迭代器分类"></a>迭代器分类</h4><ul><li>内部迭代器：本身是函数，该函数内部定义好迭代规则，完全接受整个迭代过程，外部只需要一次调用。如Array.prototype.forEach()方法。</li><li>外部迭代器：本身是函数，执行返回的迭代回到，迭代下一个元素必须显示调用。使用forEach调用，只可以一次性把数据全部拉取消耗，而迭代器可以用于以一次一步的方式控制行为，使得迭代过程更加灵活可控。</li></ul><blockquote><p>ES6为迭代器引入了一个隐式的标准化接口。Javascript许多内建的数据结构，例如Array、Map、Set、String、TypedArray、函数的 arguments 对象、NodeList 对象都具备 Iterator 接口。可以通过在控制台打印一个Array实例，查看其原型上具有一个Symbol.iterator属性（Symbol.iterator其实是Symbol(‘Symbol.iterator’)的简写，属性名是Symbol类型代表着这个属性的唯一以及不可重写覆盖），它就是迭代器函数，执行这个函数，就会返回一个迭代器对象。</p></blockquote><h4 id="迭代器的使用"><a href="#迭代器的使用" class="headerlink" title="迭代器的使用"></a>迭代器的使用</h4><h5 id="for…of使用"><a href="#for…of使用" class="headerlink" title="for…of使用"></a>for…of使用</h5><ul><li>数组</li></ul><blockquote><p>数组有内置的@@iterator。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter.next()) <span class="comment">// &#123; value: 'a', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()) <span class="comment">// &#123; value: 'b', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()) <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line">&#125; <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><p><strong>for - of是ES6新加入的。for-of循环首先会向被访问对象请求一个迭代器对象，然后通过调用这个迭代器对象的next()方法来遍历所有返回值。</strong></p><ul><li>对象</li></ul><blockquote><p>普通的对象没有内置的@@iterator，所以无法自动完成for…of遍历。但是可以给任何想遍历的对象定义@@iterator。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    b:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 给对象定义@@iterator</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="built_in">Symbol</span>.iterator, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    <span class="comment">//意义是，对象里的symbol.iterator值为一个迭代器对象，有一个名字叫做next的方法</span></span><br><span class="line">        <span class="keyword">var</span> o = <span class="keyword">this</span>; <span class="comment">//对象</span></span><br><span class="line">        <span class="keyword">var</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> ks = <span class="built_in">Object</span>.keys(o);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    <span class="comment">//for of循环请求到迭代器对象，然后通过调用对象的next方法来遍历所有的返回值</span></span><br><span class="line">                <span class="built_in">console</span>.log(o, idx);</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    value: o[ks[idx++]],</span><br><span class="line">                    done: idx &gt; ks.length</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for of循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的next方法来遍历所有返回值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> myObject) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="spread运算符"><a href="#spread运算符" class="headerlink" title="spread运算符"></a>spread运算符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y, z);</span><br><span class="line">&#125;</span><br><span class="line">f(...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]);  \\ <span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结构赋值可以部分或者完全消耗一个迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> it = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="comment">// 部分消耗</span></span><br><span class="line"><span class="keyword">var</span> [x, y] = it;</span><br><span class="line"><span class="built_in">console</span>.log(x, y);  <span class="comment">// 1 2</span></span><br><span class="line"><span class="comment">// 完全消耗</span></span><br><span class="line"><span class="keyword">var</span> [y, ...z] = it;</span><br><span class="line"><span class="built_in">console</span>.log(y, z);   <span class="comment">// 3  [4, 5]</span></span><br></pre></td></tr></table></figure><h5 id="返回迭代器的API"><a href="#返回迭代器的API" class="headerlink" title="返回迭代器的API"></a>返回迭代器的API</h5><blockquote><p>产生迭代器对象，已经介绍了通过定义迭代器函数生产迭代器对象，调用javascript内置数据结构定义好的迭代器函数。除此，对于数组，以及es6新增的map、set，这些数据结构不仅本身已部署迭代器接口，还提供了API方法返回迭代器对象。</p><ul><li>entries() 返回一个遍历器对象，用来遍历[key, value]</li><li>keys() 返回一个遍历器对象，用来遍历所有的key</li><li>values() 返回一个遍历器对象，用来遍历所有的value </li></ul></blockquote><ul><li>数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arrEntries = arr.entries();</span><br><span class="line"><span class="built_in">console</span>.log(arrEntries.next()); <span class="comment">//&#123;value: Array(2)[0,1], done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(arrEntries.next()); <span class="comment">//&#123;value: Array(2)[1,2], done: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrKeys = arr.keys();</span><br><span class="line"><span class="built_in">console</span>.log(arrKeys.next()); <span class="comment">// &#123;value: 0, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(arrKeys.next()); <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrValues = arr.values();</span><br><span class="line"><span class="built_in">console</span>.log(arrValues.next()); <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(arrValues.next()); <span class="comment">// &#123;value: 2, done: false&#125;</span></span><br></pre></td></tr></table></figure><ul><li>Set</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1, 2, 3, 4]);  //传入数组</span><br><span class="line">let setEntries = <span class="keyword">set</span>.entries();</span><br><span class="line">console.log(setEntries.next()); // &#123;value: <span class="built_in">Array</span>(<span class="number">2</span>)[<span class="number">1</span>, <span class="number">1</span>], <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(setEntries.next()); <span class="comment">// &#123;value: Array(2)[1, 1], done: false&#125;</span></span><br></pre></td></tr></table></figure><p><strong>对比数组，可以在key value中发现set和array的区别，array的key从0开始，set的key从1开始</strong></p><ul><li>Map</li></ul><p>用法如上。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="为什么对象没有内置迭代器"><a href="#为什么对象没有内置迭代器" class="headerlink" title="为什么对象没有内置迭代器"></a>为什么对象没有内置迭代器</h4><p>关于对象，对象是javascript的基础，javascript中有许多特殊的对象子类型具备一些额外的行为，包括array, set,map等。</p><p>对于对象的遍历，需要考虑遍历的是对象自身的属性还是遍历对象自身的可枚举属性，还是遍历对象原型的属性，还是遍历对象原型链上可枚举的属性。因此无法统一一个合适的迭代器。</p><h4 id="使用生成器生成迭代器对象"><a href="#使用生成器生成迭代器对象" class="headerlink" title="使用生成器生成迭代器对象"></a>使用生成器生成迭代器对象</h4><blockquote><p>函数是一段执行特定任务的代码块，一般函数开始运行之前，在它结束之前，不会被打断。在ES6中引入了一种叫<strong><span color="green">生成器</span></strong>的函数形式，</p><ul><li>生成器可以在执行中暂停自身，可以立即恢复执行。</li><li>生成器在每次暂停/恢复是都提供了一个双向传递信息的功能，暂停时生成器函数会返回一个值，恢复执行时迭代器可以通过向next方法传参向函数内部传递一个值。</li><li>yield关键字用来标示一个暂停点，出现次数不限。</li><li>yield不止是一个暂停点，它还是一个表达式，它会发出一个值，如果没有，后面的值相当于yield undefined。</li><li>yield不是运算符，因为它可以单独使用。</li><li>yield关键字的优先级很低，只有spread运算符和逗号运算符优先级比它低。</li></ul></blockquote><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'stop'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = fn();</span><br><span class="line"><span class="built_in">console</span>.log(it.next());  <span class="comment">// &#123;value: 'stop', done: false&#125;</span></span><br><span class="line">it.next();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qs与json序列化的区别</title>
      <link href="/2020/11/10/qs%E4%B8%8Ejson%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/11/10/qs%E4%B8%8Ejson%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>​    在开发vue项目的时候，发现需要使用不同的序列化函数才能成功联通后端。所以我查找了一些相关资料，记录下来，用于以后工作查阅。</p><h4 id="前端请求格式："><a href="#前端请求格式：" class="headerlink" title="前端请求格式："></a>前端请求格式：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">url: Url.importRules,</span><br><span class="line">method: <span class="string">'post'</span>,</span><br><span class="line">headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="built_in">JSON</span>.stringify(ws)  <span class="comment">// 使用json.stringfy序列化方法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  url: Url.getResultUrl,</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: qs.stringify(postdata)    <span class="comment">//使用qs.stringfy序列化方法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="后端接收代码："><a href="#后端接收代码：" class="headerlink" title="后端接收代码："></a>后端接收代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = &#123;<span class="string">"/importRules"</span>&#125;,method = &#123;RequestMethod.POST&#125;)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">importRules</span><span class="params">(@RequestBody ImportRules[] importRules)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xxx.importRules(importRules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = &#123;<span class="string">"/getResult"</span>&#125;,consumes=&#123;<span class="string">"application/x-www-form-urlencoded;charset=utf-8"</span>&#125;,method = &#123;RequestMethod.POST&#125;)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;EvolutionStrategiesRes&gt; <span class="title">getResult</span><span class="params">(@RequestParam(name = <span class="string">"support"</span>)</span> String support, @<span class="title">Request</span><span class="params">(name = <span class="string">"conf"</span>)</span> String conf)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xxx.getResult(support, conf, flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于qs与json的区别"><a href="#关于qs与json的区别" class="headerlink" title="关于qs与json的区别"></a>关于qs与json的区别</h4><blockquote><p>qs可以通过<strong>npm install qs</strong>命令进行安装。而qs.stringfy()将对象序列化为url的形式，以&amp;进行拼接。</p><p>json则将对象序列化为json格式，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'hehe'</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;;</span><br><span class="line">&gt;  qs.stringify(a)</span><br><span class="line">&gt; <span class="comment">// 'name=hehe&amp;age=10'</span></span><br><span class="line">&gt; <span class="built_in">JSON</span>.stringify(a)</span><br><span class="line">&gt; <span class="comment">// '&#123;"name":"hehe","age":10&#125;'</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h5 id="qs的类型"><a href="#qs的类型" class="headerlink" title="qs的类型"></a>qs的类型</h5><blockquote><p> qs分为三种类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; qs.stringify(&#123;<span class="attr">ids</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;, &#123;<span class="attr">arrayFormat</span>: ‘indices‘&#125;)</span><br><span class="line">&gt; <span class="comment">//形式： ids[0]=1&amp;aids1]=2&amp;ids[2]=3</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; qs.stringify(&#123;<span class="attr">ids</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;, &#123;<span class="attr">arrayFormat</span>: ‘brackets‘&#125;)</span><br><span class="line">&gt; <span class="comment">//形式：ids[]=1&amp;ids[]=2&amp;ids[]=3</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; qs.stringify(&#123;<span class="attr">ids</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;, &#123;<span class="attr">arrayFormat</span>: ‘repeat‘&#125;)</span><br><span class="line">&gt; <span class="comment">//形式： ids=1&amp;ids=2&amp;id=3</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h4 id="后端spring-boot"><a href="#后端spring-boot" class="headerlink" title="后端spring boot"></a>后端spring boot</h4><ul><li>@RequestParam<ul><li>适用于content-type不为application/json的post请求，post请求需要使用qs.stringify()序列化数据。</li><li>适用于get请求</li></ul></li><li>@RequestBody<ul><li>适用于content-type等于application/json的post请求，post请求需要使用json.stringify()序列化数据。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this的绑定</title>
      <link href="/2020/10/28/this%E7%9A%84%E7%BB%91%E5%AE%9A/"/>
      <url>/2020/10/28/this%E7%9A%84%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL常见注意问题</title>
      <link href="/2020/02/08/SQL%E5%B8%B8%E8%A7%81%E6%B3%A8%E6%84%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/08/SQL%E5%B8%B8%E8%A7%81%E6%B3%A8%E6%84%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="sql语句的执行顺序："><a href="#sql语句的执行顺序：" class="headerlink" title="sql语句的执行顺序："></a>sql语句的执行顺序：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from &lt;1&gt;</span><br><span class="line">on &lt;2&gt;</span><br><span class="line">join &lt;3&gt;</span><br><span class="line">where &lt;4&gt;</span><br><span class="line">group by &lt;5&gt;</span><br><span class="line">having &lt;6&gt;</span><br><span class="line"><span class="keyword">select</span> &lt;<span class="number">7</span>&gt;</span><br><span class="line"><span class="keyword">distinct</span> &lt;<span class="number">8</span>&gt;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> &lt;<span class="number">9</span>&gt;</span><br><span class="line"><span class="keyword">limit</span> &lt;<span class="number">10</span>&gt;</span><br></pre></td></tr></table></figure><ol><li><p><font color="pink"> FROM</font> 执行笛卡尔乘积</p><p><font color="pink">from</font> 才是SQL语句执行的第一步，对from子句中的前两个表执行笛卡儿乘积，生成虚拟表VT1，获取不同数据源的数据集。</p><p>from子句的执行顺序为<font color="green">从后往前、从右到左</font>，from子句中写在最后的表将被先处理，当from子句中包含多个表的情况下，我们需要选择数据最少的表作为基础表。</p></li><li><p><font color="pink">ON</font> 应用ON过滤器</p><p>对虚拟表VT1应用ON筛选器，ON中的逻辑表达式将应用到虚拟表VT1中的各个行，筛选出满足ON逻辑表达式（投影、选择等等）的行，生成虚拟表VT2</p></li><li><p><font color="pink">JOIN</font> 添加外部行</p><p>如果指定了outer join保留表中未找到匹配的行将作为外部行添加到虚拟表vt2，生成虚拟表VT3。保留表如下：</p><ul><li>LEFT OUTER JOIN把左表记为保留表</li><li>RIGHT OUTER JOIN把右表记为保留表</li><li>FULL OUTER JOIN把左右表都作为保留表</li></ul><p>在虚拟表VT2表的基础上添加保留表中被过滤掉的数据，非保留表中的数据被赋予null值，最后生成虚拟表VT3。</p></li><li><p><font color="pink">WHERE </font>应用where过滤器</p><p>对虚拟表VT3应用WHERE筛选器。根据指定的条件对数据进行筛选，并把满足的数据插入虚拟表VT4。</p><ul><li>由于数据还没有分组，因此现在还不能在WHERE过滤器中使用聚合函数对分组统计的过滤。</li><li>同时，由于还没有进行列的选取操作，因此在SELECT中使用列的别名也是不被允许的。</li></ul><p>如果FROM子句包含两个以上的表，则对上一个联接生成的结果表和下一个表重复执行步骤1-3直到处理完所有的表为止。</p></li><li><p><font color="pink">GROUP BY </font> 分组</p><ul><li>按group by 子句中的列/列表将虚拟表VT4中的行唯一的值组合成为一组，生成虚拟表VT5。如果应用了group by，那么后面的所有步骤都只能得到的虚拟表VT5的列或者是聚合函数。原因在最终的结果集中只为每个组包含一行。</li><li><font color="pink">AGG_FUNC计算聚合函数</font><ul><li>AVG</li><li>COUNT</li><li>FIRST</li><li>LAST</li><li>MAX</li><li>MIN</li><li>SUM</li></ul></li></ul></li><li><p><font color="pink">HAVING </font> 应用HAVING过滤器</p><p>对虚拟表VT5应用HAVING筛选器。根据指定的条件对数据进行筛选，并把满足的数据插入虚拟表VT6。</p><p><em>HAVING</em> 语句在SQL中的主要作用与<em>WHERE</em>语句作用是相同的，但是HAVING是过滤聚合值。</p></li><li><p><font color="pink">SELECT</font> 选出指定列</p><p>将虚拟表VY6中的SELECT中出现的列筛选出来，并对字段进行处理，可以重命名，条件判断语句等，计算SELECT中的表达式，产生虚拟表VT7。</p></li><li><p><font color="pink">DISTINCT </font> 行去重</p><p>将重复的行从虚拟表VT7中一处，产生虚拟表VT8。DISTINCT用来删除重复行，只保留唯一的。</p></li><li><p><font color="pink">ORDER BY </font>排列</p><p>将虚拟表VT8中的行按order by子句中的列/列表排序，生成游标VC9，注意不是虚拟表。因此，使用order by 子句查询不能应用于表达式。同时order by子句的执行顺序为从左到右是非常消耗资源的。</p></li><li><p><font color="pink">LIMIT </font> 指定返回行</p><p>从VC9的开始处选择指定数量行，生成虚拟表VT10，并返回调用者。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用的数据结构</title>
      <link href="/2019/11/27/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2019/11/27/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的数据结构"><a href="#常用的数据结构" class="headerlink" title="常用的数据结构"></a>常用的数据结构</h2><h4 id="数组、字符串（Ar-ray-amp-String）"><a href="#数组、字符串（Ar-ray-amp-String）" class="headerlink" title="数组、字符串（Ar ray &amp; String）"></a>数组、字符串（Ar ray &amp; String）</h4><ul><li>举例：翻转字符串</li><li>解法：用两个指针（分别指向头部和尾部，互相交换，一步步向中间靠近，直到两指针相遇）</li><li>注意：无法直接修改字符串里的字符，所以必须先把字符串变换为数组，再运用这个算法。</li></ul><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><ol><li>构建一个数组非常简单</li><li>能在O(1)时间里根据数组下表(index)查询某个元素</li></ol><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><ol><li>构建时必须连续分配一段连续的空间</li><li>删除和添加某个元素时，需要消耗O(n)的时间</li></ol><h5 id="例题分析："><a href="#例题分析：" class="headerlink" title="例题分析："></a>例题分析：</h5><ul><li><p>给定两个字符串s和t，编写一个函数来判断t是否时s的字母异位词。（可假设字符串只包含小写字母）</p></li><li><p><font color="blue">示例1:</font></p></li><li><ul><li>输入：s = ‘anagram’, t = ‘nagaram’</li><li>输出：t rue</li></ul></li><li><p><font color="blue">示例2:</font></p></li><li><ul><li>输入：s = ‘rat’, t = ‘car’</li><li>输出: false</li></ul></li><li><p><font color="green"> 解题思路：</font></p></li><li><p>一个重要前提：“假设两个字符串只包含小写字母”，一共只有26个</p></li><li><ol><li>可以利用两个长度都为26的字符数组来统计每个字符串中小写字母出现的次数，然后再对比是否相等；</li><li>可以只利用一个长度为26的字符数组，将出现在字符串s里的字符个数加1，而出现在字符串t里的字符个数减1，最后判断每个小写字母的个数是否为0。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isAnagram</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length() != t.length())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span>* count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">26</span>;i++)</span><br><span class="line">        count[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; s.length();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        count[s.at(i)-<span class="string">'a'</span>]++;</span><br><span class="line">        count[t.at(i)-<span class="string">'a'</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (count[i] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isAnagram</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> len(s) != len(t):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        c = set(t)   <span class="comment">#使用集合的特性，无序性，去重复性</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">            <span class="keyword">if</span> t.count(i) != s.count(i):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="链表-（Linkedlist）"><a href="#链表-（Linkedlist）" class="headerlink" title="链表 （Linkedlist）"></a>链表 （Linkedlist）</h4><ul><li>单链表： 链表中的每个元素实际上是一个单独的对象，而所有对象都通过每个元素中的引用字段链接在一起。</li><li>双链表：与单链表不同，双链表的每个结点中都含有两个引用字段。</li></ul><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ol><li>链表可以灵活地分配内存空间；</li><li>能在O(1)时间内删除或添加元素，前提是该元素的前一个元素已知，当然也取决于世单链表还是双链表，在双链表中，如果已知该元素的后一个元素，同样可以在o(1)的时间内删除或者添加该元素。</li></ol><h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>不像数组能通过下表迅速读取元素，每次都要从链表头开始一个一个读取；</li><li>查询第k个元素需要O(k)时间</li></ol><h5 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h5><ol><li><p>链表不适合快速查询；</p></li><li><p>数据的元素个数不确定，且需要经常进行添加删除，链表会比较适合；</p></li><li><p>数据元素大小确定，删除插入的操作不多，数组更适合</p></li></ol><h5 id="经典解法："><a href="#经典解法：" class="headerlink" title="经典解法："></a>经典解法：</h5><ol><li><font color="green"> 利用快慢指针（有时候需要用到三个指针）</font></li></ol><p>典型题目有：链表的翻转、寻找倒数第k个元素、寻找链表中间位置的元素、判断链表是否有环等等。</p><ol start="2"><li><font color="green">构建一个虚假的链表头</font></li></ol><p>一般用在要返回新的链表的题目中，比如，给定两个排好序的链表，要求将它们整合在一起并排好序。又比如，将一个链表中的奇数和偶数按照原定的顺序分开后重新组合成一个新的链表，链表的头一半是奇数，后一半是偶数。</p><p>在这类问题里，如果不用一个虚假的链表头，那么在创建新链表的第一个元素时，我们都得要判断一下链表的头指针是否为空，也就是要多写if else语句。比较简洁的写法是创建一个空的链表头，直接往其后面添加元素即可，最后返回这个空的链表头的下一个节点即可。</p><h5 id="经典例题："><a href="#经典例题：" class="headerlink" title="经典例题："></a>经典例题：</h5><ul><li><p>给你一个链表，每k个结点一组进行翻转，请你返回翻转后的链表。k是一个正整数，它的值小于或等于链表的长度。如果节点总数不是k的整数倍，那么请将最后剩余的节点保持原有顺序。</p></li><li><p>说明：</p></li><li><ul><li>你的算法只能使用常数的额外空间</li></ul></li><li><ul><li>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</li></ul></li><li><p><font color="blue">示例1:</font></p></li><li><p>给定这个链表，1-&gt;2-&gt;3-&gt;4-&gt;5</p></li><li><p>当k = 2时，应当返回：2-&gt;1-&gt;4-&gt;3-&gt;5</p></li><li><p>当k= 3时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p></li><li><p><font color="green">解题思路：</font></p></li><li><p>在翻转链表的时候，可以借助三个指针：prev、curr、next，分别代表前一个节点、当前节点和下一个节点。（画图或者脑袋里过一遍过程）</p></li><li><p>说明：有时候需要在最前面建立一个dummy结点的原因是：当原来的头结点发生了变换，比如被删除了或者被交换位置了，就需要记录新的头结点的位置；在进行链表变换的时候，要注意<font color="red">“断链”</font>的情况。</p></li><li><ol><li>将curr指向的下一节点保存到next指针；</li><li>curr的next指向prev，一起前进一步；</li><li>重复之前步骤，直到k个元素翻转完毕；</li><li>当完成了局部的翻转后，prev就是最终的新的链表头，curr指向了下一个要被处理的局部，而原来的头指针head成为了链表的尾巴。</li></ol></li></ul></li></ul>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//迭代方法：（耗时有点长）</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(!head || !head-&gt;next)</span><br><span class="line">              <span class="keyword">return</span> head;</span><br><span class="line">          <span class="comment">//交换发生头结点转换，设置dummy</span></span><br><span class="line">          ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>), *pre = dummy;</span><br><span class="line">          dummy-&gt;next = head;</span><br><span class="line">          <span class="comment">//1，2，3，4</span></span><br><span class="line">          <span class="keyword">while</span>(pre-&gt;next &amp;&amp; pre-&gt;next-&gt;next)</span><br><span class="line">          &#123;</span><br><span class="line">              ListNode* t = pre-&gt;next-&gt;next; <span class="comment">//t指向2</span></span><br><span class="line">              pre-&gt;next-&gt;next = t-&gt;next;  <span class="comment">//1和3连起来</span></span><br><span class="line">              t-&gt;next = pre-&gt;next;    <span class="comment">//2和1连接起来</span></span><br><span class="line">              pre-&gt;next = t;    <span class="comment">//和前一个交换的对连接起来，t现在是二元对的头部</span></span><br><span class="line">              pre = t-&gt;next;   <span class="comment">//指向1</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//用了一个递归的方法</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(!head || !head-&gt;next)</span><br><span class="line">              <span class="keyword">return</span> head;</span><br><span class="line">          ListNode* first = head;</span><br><span class="line">          ListNode* second = head-&gt;next;</span><br><span class="line">          head = second;</span><br><span class="line">          first-&gt;next = swapPairs(second-&gt;next);</span><br><span class="line">          second-&gt;next  =first;</span><br><span class="line">          <span class="keyword">return</span> head;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        dummy = ListNode(<span class="number">-1</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        pre = dummy</span><br><span class="line">        <span class="keyword">while</span> pre.next != <span class="literal">None</span> <span class="keyword">and</span> pre.next.next!=<span class="literal">None</span>:</span><br><span class="line">            t = pre.next.next</span><br><span class="line">            pre.next.next = t.next</span><br><span class="line">            t.next = pre.next</span><br><span class="line">            pre.next = t</span><br><span class="line">            pre = t.next </span><br><span class="line">      <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure><h4 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈(stack)"></a>栈(stack)</h4>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyspark安装与配置</title>
      <link href="/2019/10/23/Pyspark%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/10/23/Pyspark%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="在mac上安装PySpark"><a href="#在mac上安装PySpark" class="headerlink" title="在mac上安装PySpark"></a>在mac上安装PySpark</h2>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyspark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划与贪婪算法</title>
      <link href="/2019/10/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/"/>
      <url>/2019/10/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h4 id="应用动态规划求解问题的特点："><a href="#应用动态规划求解问题的特点：" class="headerlink" title="应用动态规划求解问题的特点："></a>应用动态规划求解问题的特点：</h4><ol><li><p>问题目标是求一个最优解</p></li><li><p>大问题可以分解为小问题，最优解是依赖各个子问题的最优解</p></li><li><p>把大问题分解成若干个小问题，小问题之间相互重叠更小的子问题</p></li><li><p>从上往下分析问题（分解大问题），从下往上求解问题。</p><p><font color="blue">在应用动态规划解决问题的时候，从解决最小问题开始，并把已经解决的子问题的最优解存储下来，并把子问题的最优解组合起来逐步解决大问题。</font></p></li></ol><h2 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h2><p>每一步都可以做出一个贪婪的选择。</p><h4 id="剪绳子"><a href="#剪绳子" class="headerlink" title="剪绳子"></a>剪绳子</h4><p>题目： 一根长度为n的绳子，请把绳子剪成m段（m、n均为整数且n&gt;1,m&gt;1）,每段绳子的长度记为k[0] ,k[1] ,k[2] ,… ,k[m]。请问$k[0] * k[1] * … * k[m]$可能的最大乘积是多少？</p><ul><li>动态规划思路：</li></ul><ol><li>当绳长为2时，只能1 * 1</li><li>当绳长为3时， 1*2</li><li>当绳长为n时，$f(n) = max((f(i)* f(n-i)))$</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProduct1</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(len == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(len == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span> * products = <span class="keyword">new</span> <span class="keyword">int</span>[len+<span class="number">1</span>];    <span class="comment">//记录子问题最优解</span></span><br><span class="line">  products[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  products[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  products[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">  products[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= len, i++)   <span class="comment">//自下而上求解问题</span></span><br><span class="line">  &#123;</span><br><span class="line">    max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i/<span class="number">2</span> ;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> product = products[j] * products[i-j];</span><br><span class="line">      <span class="keyword">if</span>(product &gt; max)</span><br><span class="line">        max = product;</span><br><span class="line">    &#125;</span><br><span class="line">    products[i] = max;</span><br><span class="line">  &#125;</span><br><span class="line">  max = products[len];</span><br><span class="line">  <span class="keyword">delete</span> products;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxproduct</span><span class="params">(len)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len &lt; <span class="number">2</span> : <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> len == <span class="number">2</span> : <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> len == <span class="number">3</span> : <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    products = [<span class="number">0</span>] * (len+<span class="number">1</span>)</span><br><span class="line">    products[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    products[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    products[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    products[<span class="number">3</span>] = <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">4</span>,len+<span class="number">1</span>):</span><br><span class="line">        maxnum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range (<span class="number">1</span>,i//<span class="number">2</span>+<span class="number">1</span>):</span><br><span class="line">            pro = products[j] * products[i-j]</span><br><span class="line">            <span class="keyword">if</span> pro &gt; maxnum:</span><br><span class="line">                maxnum = pro</span><br><span class="line">        products[i] = maxnum</span><br><span class="line">    <span class="keyword">return</span> products[len]</span><br></pre></td></tr></table></figure><ul><li>贪婪算法思路：</li></ul><ol><li>当$n\geq5$时，我们尽可能多地剪绳子长度为3的绳子；当绳子长度为4时，把绳子剪成两段长度为2的绳子。</li><li>证明思路的正确性：</li><li>当$n\geq5$时，$2(n-2) &gt; n$并且$3(n-3)&gt;n$并且$3(n-3)\geq2(n-2)$，因此我们更多地剪长度为3的绳子段。</li><li>当$n=4$时，$2\times2&gt;1\times3$，而且$2\times2 = 4$，当绳子长度为4时没有必要剪，不过题目要求至少剪1刀。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxproduct2</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(len == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(len == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span> timesof3 = len /<span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span>(len-timesof3*<span class="number">3</span> == <span class="number">1</span>)   <span class="comment">//说明包含4</span></span><br><span class="line">    timesof3--;</span><br><span class="line">  <span class="keyword">int</span> timesof2 = (len - <span class="number">3</span>*timesof3)/<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">3</span>,timesof3))*(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,timesof2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯法</title>
      <link href="/2019/10/08/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
      <url>/2019/10/08/%E5%9B%9E%E6%BA%AF%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>​    回溯法适合由多个步骤组成的问题，并且每个问题都有多个选项。用回溯法解决的问题的所有选项可以形象地用<font color="green">树状结构</font>表示。</p><p>​    如果在叶子结点的状态不满足约束条件，那么只好回溯到它的上一个节点再尝试其他的选项。如果上一个节点所有可能的选项都已经试过，并且不能达到满足条件的<font color="blue">终结状态</font>，那么在此回溯到上一个节点。如果所有节点的所有选项都已经尝试过，但没有到达终结状态，则说明该问题无解。</p><p>​    通常回溯代码适合用递归。</p><h2 id="题目1-：-矩阵中的路径"><a href="#题目1-：-矩阵中的路径" class="headerlink" title="题目1 ： 矩阵中的路径"></a>题目1 ： 矩阵中的路径</h2><h3 id="问题：设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果有一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。"><a href="#问题：设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果有一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。" class="headerlink" title="问题：设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果有一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。"></a>问题：设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果有一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。</h3><p>思路： 路径看作栈，定义和字符矩阵大小相同的布尔矩阵，标识路径是否已经经过该格。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasPathCore</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * matrix,<span class="keyword">int</span> rows,<span class="keyword">int</span> cols,<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">const</span> <span class="keyword">char</span> * str,<span class="keyword">int</span> &amp;pathLength, <span class="keyword">bool</span> * visited)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(matrix == <span class="literal">nullptr</span> || cols &lt; <span class="number">1</span> || rows &lt;<span class="number">1</span>||str == <span class="literal">nullptr</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">bool</span> haspath = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(row &gt; <span class="number">0</span> &amp;&amp; row &lt; rows &amp;&amp; col &gt; <span class="number">0</span> &amp;&amp; col &lt; cols </span><br><span class="line">    &amp;&amp; matrix[row * cols + col] == str[pathLength] </span><br><span class="line">    &amp;&amp; !visited[row * cols + col])</span><br><span class="line">  &#123;</span><br><span class="line">    pathLength++;</span><br><span class="line">    visited[row*cols+col] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  haspath = hasPathCore(matrix,rows,cols,row,col<span class="number">-1</span>,str,pathLength,visited) ||</span><br><span class="line">    hasPathCore(matrix,rows,cols,row,col+<span class="number">1</span>,str,pathLength,visited)||hasPathCore(matrix,rows,cols,row<span class="number">-1</span>,col,str,pathLength,visited)|| hasPathCore(matrix,rows,cols,row+<span class="number">1</span>,col,str,pathLength,visited);</span><br><span class="line">  <span class="keyword">if</span>(!haspath)</span><br><span class="line">  &#123;</span><br><span class="line">    --pathLength;</span><br><span class="line">    visited[cols*row+col] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> haspath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">char</span> * matrix,<span class="keyword">int</span> rows,<span class="keyword">int</span> cols,<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(matrix == <span class="literal">nullptr</span> || rows&lt;<span class="number">1</span> || cols &lt; <span class="number">1</span> || str == <span class="literal">nullptr</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">bool</span>* viseted = <span class="keyword">new</span> <span class="keyword">bool</span>[rows*cols];</span><br><span class="line">  <span class="built_in">memset</span>(matrix,<span class="number">0</span>,rows*cols);</span><br><span class="line">  <span class="keyword">int</span> pathLength = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">0</span> ; row &lt; rows;row++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> col = <span class="number">0</span>; col &lt;cols;col++)</span><br><span class="line">      <span class="keyword">if</span>(hasPathCore(matrix,rows,cols,row,col,str,pathLength,visited)) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> visited;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目2-机器人的运动范围"><a href="#题目2-机器人的运动范围" class="headerlink" title="题目2: 机器人的运动范围"></a>题目2: 机器人的运动范围</h3><p>题目：地上有一个m行n列的方格。一个机器人从坐标（0，0）的格子开始移动，它每次可以向左右上下移动一格，但不能进入行坐标和列坐标的数位之和大于k的格子。请问，该机器人可以到达多少个格子？</p><ul><li>思路：</li></ul><p>机器人从行列坐标数位之和最小点（0，0）开始移动，可以向4个方向移动，继续判断，且不能重复经过格子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDigitSum</span><span class="params">(<span class="keyword">int</span> number)</span>  <span class="comment">//计算number数位之和值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(number &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    sum += number %<span class="number">10</span>;</span><br><span class="line">    number/=<span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断这个格子机器人是否可以经过</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows,<span class="keyword">int</span> cols,<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">bool</span> * visited)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(col&gt;<span class="number">0</span>&amp;&amp;col &lt; cols &amp;&amp; row &gt; <span class="number">0</span> &amp;&amp; row &lt; rows &amp;&amp;!visited[row*cols + col]&amp;&amp; getDigitSum(row)+getDigitSum(col) &lt;= threshold)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">movingCountCore</span><span class="params">(<span class="keyword">int</span> thershold,<span class="keyword">int</span> rows,<span class="keyword">int</span> cols,<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">bool</span> * visited)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(check(thershold,rows,cols,row,col,visited))</span><br><span class="line">  &#123;</span><br><span class="line">    visited[row*cols + col] = <span class="literal">true</span>;</span><br><span class="line">    count = <span class="number">1</span> + movingCountCore(thershold,rows,cols,row<span class="number">-1</span>,col,visited) + movingCountCore(thershold,rows,cols,row+<span class="number">1</span>,col,visited) + movingCountCore(thershold,rows,cols,row,col <span class="number">-1</span>,visited) + </span><br><span class="line">      movingCountCore(thershold,rows,cols,row,col+<span class="number">1</span>,visited);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> thershold, <span class="keyword">int</span> rows,<span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span>* visited = <span class="keyword">new</span> <span class="keyword">bool</span>[rows*cols];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows*cols;i++)</span><br><span class="line">    visited = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">int</span> count =  movingCountCore(thershold, rows, cols ,<span class="number">0</span>,<span class="number">0</span>,visited);</span><br><span class="line">  <span class="keyword">delete</span> visited;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序与查找</title>
      <link href="/2019/10/08/%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/"/>
      <url>/2019/10/08/%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="员工年龄排序"><a href="#员工年龄排序" class="headerlink" title="员工年龄排序"></a>员工年龄排序</h3><ul><li>要求：时间效率为$O(n)$，允许使用常量大小的辅助空间。</li><li>思路：排序数字具有具体含义，员工年龄，这就说明排序数字大小具有具体有限且较小的范围。可以使用辅助空间来统计每个年龄出现的次数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortages</span><span class="params">(<span class="keyword">int</span> ages[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ages==null || len &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> timesofage[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    timesofage[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len ; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    age = ages[i];</span><br><span class="line">    ++timesofage[age];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span>&amp;&amp;k &lt; len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> j = timesofages[i];</span><br><span class="line">    <span class="keyword">while</span>(j &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      ages[k++] = i;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h3><p>题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。</p><ul><li>{3,4,5,1,2}</li><li>{1,1,1,1,1}</li><li>{1,1,1,0,1}</li></ul><p>思路：</p><p>旋转之后的数组实际可以划分为两个 排序的子数组，且前面的子数组的元素都大于或者等于后面子数组的元素。而最小的元素刚好就是这两个子数组的分界线，可以采用<font color="blue">二分查找</font>的思路寻找最小元素。 还有 <font color="green">特例</font>，排序数组本身也是一种旋转，这种情况，数组的最小元素就是第一个元素。「1，1，1，0，1」这种情况，第一个指针和第二个指针，俩指针中间的数字都是1，这种情况必须<font color="blue">顺序查找</font>。</p><ul><li>c++：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">minInorder</span><span class="params">(<span class="keyword">int</span> *numbers,<span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> min = numbers[index1];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = index1+<span class="number">1</span>;i &lt;=index2;i++)</span><br><span class="line">    <span class="keyword">if</span>(numbers[i] &lt; min)</span><br><span class="line">      min = numbers[i];</span><br><span class="line">  <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> *numbers,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> index1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> index2 = len<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">int</span> midindex = index1;    <span class="comment">//初始赋值是考虑排序数组本身，第一个元素就是最小值</span></span><br><span class="line">  <span class="keyword">while</span>(numbers[index1]&gt;=numbers[index2])</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(index2-index2 == <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> numbers[index2];</span><br><span class="line">    midindex=(index1+index2)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(numbers[index1] == numbers[index2] &amp;&amp; numbers[midindex] == numbers[index1])</span><br><span class="line">      <span class="keyword">return</span> minInorder(numbers,index1,index2);</span><br><span class="line">    <span class="keyword">if</span>(numbers[midindex]&gt; numbers[index1])</span><br><span class="line">      index1 = midindex;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      index2 = midindex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> numbers[midindex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2019/10/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/10/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>时间复杂度 <font color="Green"> O(n logn)</font></p><ul><li>基本思想：</li></ul><ol><li>数组中选择一个数字，作为基准pivot</li><li>比选择的数字小的数字移到数组的左边，比选择的数字大的数字移到数组的右边</li><li>此时带排序数组被基准原色分割为两部分，一部分数组的元素值小于pivot，另一部分数组的元素值大于pivot</li><li>分别对分割后的两部分继续进行快速排序，知道数组有序</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len, <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(data ==<span class="literal">nullptr</span> ||  len &lt;=<span class="number">0</span> || s &lt;<span class="number">0</span> || e &gt;= len)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">std</span>::exception(<span class="string">"Invalid Parameters"</span>);</span><br><span class="line"><span class="keyword">int</span> index = RandowInRange(s, e); <span class="comment">//生成一个在start-end之间的随机数</span></span><br><span class="line">swap(&amp;data[index],&amp;data[end]);    <span class="comment">//基准数字交换至数组末尾</span></span><br><span class="line"><span class="keyword">int</span> small = s <span class="number">-1</span>;    <span class="comment">//作为小于基准数字的的数在数组中的坐标</span></span><br><span class="line"><span class="keyword">for</span>(index = s; index &lt;e; ++index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(data[index] &lt; data[end])   <span class="comment">//找到小于基准数字的数</span></span><br><span class="line">&#123;</span><br><span class="line">++small;</span><br><span class="line"><span class="keyword">if</span>(small != index)      <span class="comment">//如果数不在小于基准数字的区间中，则把数字移至区间中</span></span><br><span class="line">swap(&amp;data[small],&amp;data[index]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">++ small;</span><br><span class="line">swap(&amp;data[small],&amp;data[end]);</span><br><span class="line"><span class="keyword">return</span> small;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start == end)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> index = partition(data, len, start, end);</span><br><span class="line"><span class="keyword">if</span>(index &gt; start)</span><br><span class="line">QuickSort(data, len, start , index<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(index &lt; end)</span><br><span class="line">QuickSort(data, len, index+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(arr, low ,high)</span>:</span></span><br><span class="line">    small = low - <span class="number">1</span></span><br><span class="line">    pivot = arr[high]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(low,high):</span><br><span class="line">        <span class="keyword">if</span> arr[j]&lt;= pivot:</span><br><span class="line">            small = small +<span class="number">1</span></span><br><span class="line">            arr[small],arr[j] = arr[j],arr[small]</span><br><span class="line">    arr[small +<span class="number">1</span>],arr[high] = arr[high],arr[small+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> small+<span class="number">1</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(arr, low, high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; high:</span><br><span class="line">        pi = partition(arr, low ,high)</span><br><span class="line">        quicksort(arr, low, pi <span class="number">-1</span>)</span><br><span class="line">        quicksort(arr, pi +<span class="number">1</span>, high)</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>时间复杂度：$O(n^2)$</p><ul><li>基本思想</li></ul><ol><li>在待排序数组中，自上而下比较相邻两个元素</li><li>每当相邻的元素它们的顺序与排序顺序相反时，交换</li></ol><ul><li>优化：</li></ul><p>当遍历一遍未排序数组没有发生交换时，此时数组已经为有序数组，可以终止排序。</p><ul><li>c++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubblesort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> flag = <span class="literal">false</span>;   <span class="comment">//标志一趟遍历是否发生交换</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len ; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--)  <span class="comment">//将较小的数向上冒</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(data[j] &lt; data[j<span class="number">-1</span>])</span><br><span class="line">      &#123;</span><br><span class="line">        swap(&amp;data[j],&amp;data[j<span class="number">-1</span>]);</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(!flag)  <span class="keyword">break</span>;    <span class="comment">//未发生交换，终止排序</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">  flag = <span class="literal">False</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">      <span class="keyword">if</span> arr[j]&lt;arr[j<span class="number">-1</span>]:</span><br><span class="line">        arr[j],arr[j<span class="number">-1</span>] = arr[j<span class="number">-1</span>],arr[j]</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">      <span class="keyword">return</span> arr</span><br><span class="line">   <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>算法复杂度：$O(n^2)$</p><ul><li>基本思想：</li></ul><ol><li>将数组第1个元素看出一个有序的子序列</li><li>从第2个元素开始，逐个插入子序列</li><li>直到插入数组所有元素</li></ol><ul><li>注意：</li></ul><ol><li>设置哨兵，相当于$O(1)$的额外空间。</li></ol><ul><li>c++:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertsort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len ; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> j = i<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = data[i];    <span class="comment">//设置哨兵，即带插入元素</span></span><br><span class="line">    <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; data[j])    <span class="comment">//找到插入位置</span></span><br><span class="line">    &#123;</span><br><span class="line">      data[j+<span class="number">1</span>] = data[j];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    data[j+<span class="number">1</span>] = temp;      <span class="comment">//插入哨兵</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Python:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertsort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        temp = arr[i]</span><br><span class="line">        j = i<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> temp &lt; arr[j] <span class="keyword">and</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">            arr[j+<span class="number">1</span>] = arr[j]</span><br><span class="line">            j = j <span class="number">-1</span></span><br><span class="line">        arr[j+<span class="number">1</span>] = temp</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>算法时间复杂度：$O(n^{1.3})$   这个1.3是个比较模糊的值，实际上指数具体数值并没有一个统一的取值，它取决于gap也就是增量的选择。一般gap=1就是直接插入排序。</p><ul><li>基本思想：</li></ul><ol><li>设置一个gap值，将待排序数组分为若干子序列，分别进行直接插入排序</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellinsert</span><span class="params">(<span class="keyword">int</span> data[],<span class="keyword">int</span> len, <span class="keyword">int</span> dk)</span>  <span class="comment">//根据dk将数组分组，分组进行直接插入排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = dk ; i &lt; len ; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = data[i];</span><br><span class="line">    <span class="keyword">int</span> j = i - dk;</span><br><span class="line">    <span class="keyword">while</span>(temp &lt; data[j] &amp;&amp; j &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      data[j+dk] = data[j];</span><br><span class="line">      j-=dk;</span><br><span class="line">    &#125;</span><br><span class="line">    data[j+dk] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellsort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> gap = n/<span class="number">2</span>; gap &gt; <span class="number">0</span> ; gap /= <span class="number">2</span>)</span><br><span class="line">    shellinsert(data,len,gap);    <span class="comment">//按照指数幂下降选择不同的gap，进行直接插入排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellsort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    n = len(arr)</span><br><span class="line">    gap = int(n/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> gap &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap,n):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i -gap</span><br><span class="line">            <span class="keyword">while</span> j&gt;=<span class="number">0</span> <span class="keyword">and</span> arr[j]&gt;temp:</span><br><span class="line">                arr[j+gap] = arr[j]</span><br><span class="line">                j = j - gap</span><br><span class="line">            arr[j+gap] = temp</span><br><span class="line">        gap = int(gap/<span class="number">2</span>)     <span class="comment">##测试的时候，代码没有加这一行，导致死循环</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h4><p>算法时间复杂度：$O(n^2)$</p><ul><li>基本思想：</li></ul><ol><li>在一组待排序数组中，选择最小或者最大的一个数与第1个位置的数进行交换；</li><li>在剩下的书中找最小或者最大的数与第2个位置的数进行交换</li><li>直到最后一个数为止。</li></ol><ul><li>c++:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectMin</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len, <span class="keyword">int</span> i)</span>   <span class="comment">//定义函数，在数组[i,len-1]范围中寻找最小元素下标，并返回</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> key = i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span> ; j &lt; len; j++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(data[key] &gt; data[j])</span><br><span class="line">      key = j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> key;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    key = selectMin(data,len,i);</span><br><span class="line">    swap(&amp;data[key],&amp;data[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Python:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectsort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        small = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i,len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[small] &gt; arr[j]:</span><br><span class="line">                small = j</span><br><span class="line">        arr[i],arr[small] = arr[small], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>算法时间复杂度：$O(n\log n)$</p><p>堆排序是采用二叉树进行排序的。</p><ul><li>基本思路（以大根堆为例）：</li></ul><ol><li>初始化堆，将数列[0,…,n-1]构造成最大化堆</li><li>交换数据，将a[0]与a[n-1]交换，使得a[n-1]是[0,…,n-1]中的最大值；然后将[0,…,n-2]重新调整为最大堆，此时a[0]是[0,…,n-2]中的最大值</li><li>将a[0]与a[n-2]交换，使得a[n-2]是[0,…,n-2]中的最大值</li><li>直到整个数组有序</li></ol><ul><li>最大化堆思路：</li></ul><ol><li>从数组中所有非叶子结点开始，按照自下向上的顺序最大化，$i = \frac{n}{2} - 1$</li><li>调整该非叶子结点和它的子节点使它成为大根堆</li></ol><ul><li>c++:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxheapdown</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> current = s;   <span class="comment">//当前根节点</span></span><br><span class="line">  <span class="keyword">int</span> child = <span class="number">2</span>*current +<span class="number">1</span>;    <span class="comment">//根节点值较大的儿子结点</span></span><br><span class="line">  <span class="keyword">for</span>(;current &lt;= e ;current = child, child = <span class="number">2</span>*child+<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(child+<span class="number">1</span> &lt;= e &amp;&amp; data[child] &lt; data[child+<span class="number">1</span>]) child++;   <span class="comment">//确定值较大的子节点</span></span><br><span class="line">    <span class="keyword">if</span>(data[child] &gt; data[current])    </span><br><span class="line">      swap(&amp;data[child],&amp;data[current]);</span><br><span class="line">    <span class="keyword">else</span>     <span class="comment">//否则说明该根堆已经是大根堆，不用再调整</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = len/<span class="number">2</span> <span class="number">-1</span>; i&lt;len; i++)</span><br><span class="line">     maxheapdown(data,i,len<span class="number">-1</span>);   <span class="comment">//最大化数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = len <span class="number">-1</span>; i &gt; <span class="number">0</span> ;i--)</span><br><span class="line">  &#123;</span><br><span class="line">    swap(&amp;data[<span class="number">0</span>],&amp;data[i]);   </span><br><span class="line">    maxheapdown(data,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Python:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxheapdown</span><span class="params">(arr,start,end)</span>:</span></span><br><span class="line">    current = start</span><br><span class="line">    child = <span class="number">2</span>*current +<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> child &lt;= end:</span><br><span class="line">        <span class="keyword">if</span> child+<span class="number">1</span> &lt;= end <span class="keyword">and</span> arr[child] &lt; arr[child+<span class="number">1</span>]:</span><br><span class="line">            child = child+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> arr[child] &gt; arr[current]:</span><br><span class="line">            arr[child],arr[current] = arr[current],arr[child]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        current = child</span><br><span class="line">        child = <span class="number">2</span>*child+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapsort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    n = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (int(n/<span class="number">2</span>)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">        maxheapdown(arr,i,n<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (n<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        arr[<span class="number">0</span>],arr[i] = arr[i],arr[<span class="number">0</span>]</span><br><span class="line">        maxheapdown(arr,<span class="number">0</span>,i<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>算法时间复杂度：$O(n\log n)$</p><p>归并排序的形式就像二叉树，它需要遍历的次数就是二叉树的深度，是稳定的排序算法。</p><ul><li>基本思想：</li></ul><ol><li>将待排序数组分为若干个子序列</li><li>每个子序列是有序的，最小子序列长度为1</li><li>再将有序子序列merge为整体的有序序列</li></ol><ul><li>c++:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> data[],<span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> * rf = <span class="keyword">new</span> <span class="keyword">int</span>[right-left+<span class="number">1</span>];   <span class="comment">//用于merge两个数组的临时数组</span></span><br><span class="line">  <span class="keyword">int</span> i = left;</span><br><span class="line">  <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j &lt;= right)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(data[i] &lt; data[j])</span><br><span class="line">      rf[k++] = data[i++];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      rf[k++] = data[j++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">    rf[k++] = data[i++];</span><br><span class="line">  <span class="keyword">while</span>(j&lt;=right)</span><br><span class="line">    rf[k++] = data[j++];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span> ; a &lt; k;a++)</span><br><span class="line">    data[left+a] = rf[a];</span><br><span class="line">  <span class="keyword">delete</span> rf;      <span class="comment">//释放临时指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> data[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(data &amp;&amp; left &lt; right)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (right-left) / <span class="number">2</span>;</span><br><span class="line">    MergeSort(data,left,mid);</span><br><span class="line">    MergeSort(data,mid+<span class="number">1</span>,right);</span><br><span class="line">    Merge(data,left,mid,right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Python:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(arr,left,mid,right)</span>:</span></span><br><span class="line">    n1 = mid - left + <span class="number">1</span></span><br><span class="line">    n2 = right - mid</span><br><span class="line">    <span class="comment">#创建临时数组</span></span><br><span class="line">    temp = [<span class="number">0</span>]*(n1+n2)</span><br><span class="line">    i = left</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= right:</span><br><span class="line">        <span class="keyword">if</span> arr[i] &lt; arr[j]:</span><br><span class="line">            temp[k] = arr[i]</span><br><span class="line">            i = i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp[k] = arr[j]</span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">        k = k+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;= mid:</span><br><span class="line">        temp[k] = arr[i]</span><br><span class="line">        k = k +<span class="number">1</span></span><br><span class="line">        i = i +<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= right:</span><br><span class="line">        temp[k] = arr[j]</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>,k):</span><br><span class="line">        arr[left+a] = temp[a]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergesort</span><span class="params">(arr,left,right)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        mid = int ((right - left)/<span class="number">2</span>)+left</span><br><span class="line">        mergesort(arr,left,mid)</span><br><span class="line">        mergesort(arr,mid+<span class="number">1</span>,right)</span><br><span class="line">        merge(arr,left,mid,right)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer-fibonacci数列</title>
      <link href="/2019/10/01/%E5%89%91%E6%8C%87offer-fibonacci%E6%95%B0%E5%88%97/"/>
      <url>/2019/10/01/%E5%89%91%E6%8C%87offer-fibonacci%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目一-：-求Fibonacci数列的第n项"><a href="#题目一-：-求Fibonacci数列的第n项" class="headerlink" title="题目一 ： 求Fibonacci数列的第n项"></a>题目一 ： 求Fibonacci数列的第n项</h2><blockquote><p>写一个函数，输入n，求Fibonacci数列的第n项。</p></blockquote><h3 id="thinking"><a href="#thinking" class="headerlink" title="thinking:"></a>thinking:</h3><blockquote><p>根据Fibonacci数列的定义，我们最先联想到的就是递归函数的使用。在上算法课学习递归时，老师也是通过举Fibonacci的列子来介绍递归。但是，递归方法计算的时间复杂度是以n的指数的方式递增的，当n=100时，计算时间就已经很长了，如果n很大，很可能会爆栈。<br>优化递归的方法，使用<font color="CornflowerBlue"> 循环迭代 </font>消除递归。</p></blockquote><h4 id="方法一：-避免重复计算，从下往上计算"><a href="#方法一：-避免重复计算，从下往上计算" class="headerlink" title="方法一： 避免重复计算，从下往上计算"></a>方法一： 避免重复计算，从下往上计算</h4><p>复杂度：<font color="green"> O(n) </font></p><ul><li>C++:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> result[n];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> fn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;=n ; i++)</span><br><span class="line">&#123;</span><br><span class="line">fn = f1+f2;</span><br><span class="line">f1 = f2;</span><br><span class="line">f2 = fn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;<span class="number">2</span> :</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n + <span class="number">1</span>):</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h4 id="方法二：避免重复计算，使用记录数组"><a href="#方法二：避免重复计算，使用记录数组" class="headerlink" title="方法二：避免重复计算，使用记录数组"></a>方法二：避免重复计算，使用记录数组</h4><h4 id="方法三：矩阵算法"><a href="#方法三：矩阵算法" class="headerlink" title="方法三：矩阵算法"></a>方法三：矩阵算法</h4><p>复杂度：<font color="green"> O(log n) </font></p><h2 id="题目二：青蛙跳台阶问题"><a href="#题目二：青蛙跳台阶问题" class="headerlink" title="题目二：青蛙跳台阶问题"></a>题目二：青蛙跳台阶问题</h2><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上n级台阶总共有多少种跳法。<br>我刚看到这道题的时候，没有想到与fibonacci数列的公式相类似。看了书上详细的分析：<br>*<font color="blue">如果只有1级台阶，那显然只有一种跳法。如果有2级台阶，那就有两种跳法：一种是分两次跳，每次跳1级；另一种就是一次跳2级。我们把n级台阶时的跳法看出n的函数，记为f(n)。当n&gt;2时，第一次跳的时候就有两种不同的选择：一是第一次只跳1级，此时跳法数目等于后面剩下的n-1级台阶的跳法数目，即为f(n-1);二是第一次跳2级，此时跳法数目等于后面剩下的n-2级台阶的跳法数目，即为f(n-2)。因此，n级台阶的不同跳法的总数f(n) = f(n-1)+f(n-2)。</font>*</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式转义自字符在Hive+Shell中的特殊注意</title>
      <link href="/2019/09/14/hive-shell%E6%AD%A3%E5%88%99%E8%BD%AC%E4%B9%89/"/>
      <url>/2019/09/14/hive-shell%E6%AD%A3%E5%88%99%E8%BD%AC%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h2 id="hive中"><a href="#hive中" class="headerlink" title="hive中"></a>hive中</h2><ul><li>正则表达式的转移字符为<em>双斜线“\\”</em></li><li>spilt(string str, string pat),分割符pat为正则表达式<ul><li>待分割字符串：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> positions <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>使用分割符“|”分割开</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(positions,<span class="string">'|'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure><p>发现，“|”也作为列表的一部分。这是因为，之间使用‘|’被默认为正则表达式中的或，而不会被作为分隔符使用，这时，分隔符为空，所以split函数将字段<em>positions</em>中的单个字符全部分隔开。</p><blockquote><p>使用“\\”转义字符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(positions,<span class="string">'\\|'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure><blockquote><p>在“[]”中拼接处字符串<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(positions,<span class="string">'[|]'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="转义“转义字符”"><a href="#转义“转义字符”" class="headerlink" title="转义“转义字符”"></a>转义“转义字符”</h2><ul><li>有时候，在一些特殊情况下，需要对’&#39;进行转义，会出现两个’\\‘或者四个’\\\\‘转义字符</li><li></li></ul><ol><li>hive的split函数和正则表达式<blockquote><p>当以“\”作为分隔符的话，那么就需要使用四个斜线“\\”，</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(<span class="string">'a\b\c'</span>,<span class="string">'\\\\'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>hive语句在shell脚本中执行<blockquote><p>shell中’&#39;是特殊字符，也需要转义，shell的转义字符是一个”&quot;。<br>hive 语句在shell脚本中执行时，就需要由shell转义后，再由hive执行。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">SQL="</span><br><span class="line">select split(positions,'\\|') from [表名] where [分区条件];</span><br><span class="line">"</span><br><span class="line">echo -e '$&#123;SQL&#125;'</span><br><span class="line">hive -e '$&#123;SQL&#125;'</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则转义,hive,shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计文件行数</title>
      <link href="/2019/09/14/%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E8%A1%8C%E6%95%B0/"/>
      <url>/2019/09/14/%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E8%A1%8C%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>今天做一个报表需求，供算法团队使用，想和旧数据比较量级，就学习一些linux的一些语法操作。总结记录，下次直接用。</p><h2 id="使用awk的特殊变量"><a href="#使用awk的特殊变量" class="headerlink" title="使用awk的特殊变量"></a>使用awk的特殊变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;print NR&#125;' 文件名 | tail -n1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk 'END&#123;print NR&#125;' 文件名</span><br></pre></td></tr></table></figure><h2 id="使用grep列出行号"><a href="#使用grep列出行号" class="headerlink" title="使用grep列出行号"></a>使用grep列出行号</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n '' 文件名 | awk -F : 'print $1' | tail -n1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n '' 文件名 | awk -F : 'END&#123;print $1&#125;'</span><br></pre></td></tr></table></figure><h2 id="使用sed流编辑-n"><a href="#使用sed流编辑-n" class="headerlink" title="使用sed流编辑-n"></a>使用sed流编辑-n</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n '$=' 文件名</span><br></pre></td></tr></table></figure><p>-解释： sed -n ‘$=’, “$”命令到最后一行，”=”打印行号</p><h2 id="使用wc命令"><a href="#使用wc命令" class="headerlink" title="使用wc命令"></a>使用wc命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 文件名|wc -l</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l 文件名|awk '&#123;print $1&#125;'</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“剑指Offer-数组”</title>
      <link href="/2019/09/14/%E2%80%9C%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E2%80%9D/"/>
      <url>/2019/09/14/%E2%80%9C%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="题目一：-找出数组中重复的数字"><a href="#题目一：-找出数组中重复的数字" class="headerlink" title="题目一： 找出数组中重复的数字"></a>题目一： 找出数组中重复的数字</h2><p>在一个<span style="border-bottom:2px dashed green;"><strong>长度为n的数组里所有的数字都在0～n-1的范围内</strong></span>。数组中某些数字是重复的，但不知道有几个数字重复了,也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2,3,1,0,2,5,3},那么对应的输出是重复的数字2或者3。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol><li>使用哈希表。<blockquote><p><font color="Green">如果哈希表里没有这个数字，就把它加入哈希表，如果哈希表里已经存在该数字，就找到一个重复的数字。</font><br><font color="Blue">时间复杂度O(n)；空间复杂度O(n)。</font></p></blockquote></li><li>注意到题目画绿线部分的特殊性。<blockquote><p><font color="Green">特别的：如果这个数组没有重复数字，那么当数组排序之后数字i将出现在下标为i的位置。</font></p></blockquote></li></ol><ul><li>重排序数组，从头到尾扫描数组中的每个数字</li><li>当扫描到下标为i的数组时，首先比较这个数字（m）是否等于下标 i</li><li>如果是，则扫描下一个数字；</li><li>否则，拿数字m和数组第m个数字进行比较。如果它和m相等，找到重复数字。如果不等，就将数组第i个数字与数组第m个数字交换位置。</li><li>重复比较、交换，直到发现重复数字。</li></ul><p><font color="Blue">时间复杂度O(n),空间复杂度O(1)。</font></p><ul><li><p>C++代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers == <span class="literal">nullptr</span> || length &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;                                 <span class="comment">//判断数组是否为空</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length ; i++)          <span class="comment">//判断数组元素是否满足题目要求</span></span><br><span class="line"><span class="keyword">if</span>(numbers[i] &lt; <span class="number">0</span> || numbers[i] &gt;= length) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(numbers[i] != i)        <span class="comment">//判断第i个元素与下标是否相等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers[i] == numbers[numbers[i]])      <span class="comment">//m等于第m个元素的值，找到重复数字</span></span><br><span class="line">&#123;</span><br><span class="line">*duplication = numbers[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">swap(numbers[i],numbers[numbers[i]]);       <span class="comment">//交换数组第i个数字和第m个数字</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">duplicate</span><span class="params">(a,dup)</span>:</span></span><br><span class="line">    long = len(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(long):</span><br><span class="line">        <span class="keyword">while</span> i != a[i]:</span><br><span class="line">            x =a [i]</span><br><span class="line">            <span class="keyword">if</span> x == a[x]:</span><br><span class="line">                dup[<span class="number">0</span>] = x</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            a[i], a[x] = a[x], a[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>测试：<br><img src="/.com//_posts/%E2%80%9C%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E2%80%9D/test1.png" alt="test1"></p><img src="/.com//09/14/“剑指Offer-数组”/test1.png" title="This is an example image"></li></ul><h2 id="题目二：不修改数组找出重复的数字"><a href="#题目二：不修改数组找出重复的数字" class="headerlink" title="题目二：不修改数组找出重复的数字"></a>题目二：不修改数组找出重复的数字</h2><p>在<span style="border-bottom:2px dashed green;"><strong>一个长度为n+1的数组里的所有数字都在1～n的范围内，所以数组中至少有一个数字是重复的</strong></span>。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2,3,5,4,3,2,6,7},那么对应的输出是重复的数字2或3。</p><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>这个题目和题目一的区别就是，不能修改原数组。</p><ol><li>复制数组，使用O(n)的辅助空间。</li><li>如果不修改数组，其实就是限制你对数组的权限是只读，也就是查找数组。如果只能查找数组，就可以利用<font color="Green">二分查找的思想。再利用题目的特殊性，如果没有重复数字，数组中元组值在1～n的数字一定只有n个，由于数组包含&gt;n个元素，所以一定包含重复数字，接下来就不断缩小包含的重复数字的数组范围。</font></li></ol><ul><li><p>把1～n的数字折半中间数字索引为m，前一半1～m，后一半m+1~n。</p></li><li><p>判断：如果1～m的数字数目超过m，那么这一半的区间里一定包含重复数字；<br>否则，就是另一半。</p></li><li><p>重复，直到找到重复的数字。<strong>（过程比较二分查找，就是多了一个统计区间中数字的数目）</strong><br><font color="Blue"> 时间复杂度O(log n), 空间复杂度O(1)</font></p></li><li><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countRange</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> * numbers, <span class="keyword">int</span> length, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers == <span class="literal">nullptr</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line"><span class="keyword">if</span>(numbers[i] &gt;= start &amp;&amp; numbers[i] &lt;= end)</span><br><span class="line">count ++;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDuplication</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> * numbers, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers == <span class="literal">nullptr</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>;            <span class="comment">//初始化查找区间范围</span></span><br><span class="line"><span class="keyword">int</span> end = length <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(start &lt;= end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = ((end -start)&gt;&gt;<span class="number">1</span>) +start;  <span class="comment">//折半中间</span></span><br><span class="line"><span class="keyword">int</span> count = countRange(numbers, length, start,middle)   <span class="comment">//从start-middle左半开始统计个数</span></span><br><span class="line"><span class="keyword">if</span>(end == start)    <span class="comment">//折半到最小区间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">1</span>)   <span class="comment">//重复数字</span></span><br><span class="line"><span class="keyword">return</span> start;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count &gt; (middle-start + <span class="number">1</span>))     <span class="comment">//重复数字在左半部分，继续查找</span></span><br><span class="line">end = middle;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">start = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">countRange</span><span class="params">(self,numbers, length, start, end)</span>:</span>   <span class="comment">#计数</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">            <span class="keyword">if</span> numbers[i] &gt;= start <span class="keyword">and</span> numbers[i] &lt;= end:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDuplication</span><span class="params">(self,numbers)</span>:</span></span><br><span class="line">        length = len(numbers)</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = length <span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> end &gt;= start:</span><br><span class="line">            middle = ((end-start)&gt;&gt;<span class="number">1</span>) + start</span><br><span class="line">            count = self.countRange(numbers, length, start, middle)</span><br><span class="line">            <span class="keyword">if</span> start == end:</span><br><span class="line">                <span class="keyword">if</span> count &gt; <span class="number">1</span>: </span><br><span class="line">                    <span class="keyword">return</span> start</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; (middle - start ) + <span class="number">1</span> :</span><br><span class="line">                end = middle</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                start = middle + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">ss = Solution()</span><br><span class="line">lst = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">ss.getDuplication(lst)</span><br></pre></td></tr></table></figure></li></ul><h2 id="题目三：-二维数组中的查找"><a href="#题目三：-二维数组中的查找" class="headerlink" title="题目三： 二维数组中的查找"></a>题目三： 二维数组中的查找</h2><p>在一个二维数组中，<span style="border-bottom:2px dashed green;">每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序</span>。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>利用二维数组是一个特殊有序的二维数组，通过查找一个数不断缩小查找范围的思想（类似二分查找的思想），选择中间值，比较然后缩小范围。<br>中间值：一位数组通常是折半。二维数组可以找右上角，左边的数字都小于右上角数字，下边的数字都大于右上角数字。</p><ul><li><p>选取数组中右上角的数字。</p></li><li><p>如果该数字等于要查找的数字，则查找过程结束；</p></li><li><p>如果该数字大于要查找的数字，则剔除这个数字所在的列；</p></li><li><p>如果该数字小于要查找的数字，则剔除这个数字所在的行。</p></li><li><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> *matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">0</span>, col = cols <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(row &lt; rows &amp;&amp; col &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[row*cols + col] == num)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(matrix[row*cols+col] &gt; num)</span><br><span class="line">col--;                                             <span class="comment">//剔除所在列</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">row++;                                           <span class="comment">//剔除所在行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> found;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>-Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(matrix,num)</span>:</span></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    col = len(matrix[<span class="number">0</span>])<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> matrix == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> row &lt; len(matrix) <span class="keyword">and</span> col &gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> matrix[row][col] == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> matrix[row][col] &gt; num:</span><br><span class="line">            col -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer, 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac删除GlobalProtect</title>
      <link href="/2019/09/10/mac%E5%88%A0%E9%99%A4GlobalProtect/"/>
      <url>/2019/09/10/mac%E5%88%A0%E9%99%A4GlobalProtect/</url>
      
        <content type="html"><![CDATA[<h4 id="之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。"><a href="#之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。" class="headerlink" title="之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。"></a>之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。</h4><ol><li>打开终端</li><li>输入终端命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/GlobalProtect.app/Contents/Resources/uninstall_gp.sh</span><br></pre></td></tr></table></figure></li></ol><p>3.完成删除。</p>]]></content>
      
      
      <categories>
          
          <category> install &amp;&amp; uninstall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
