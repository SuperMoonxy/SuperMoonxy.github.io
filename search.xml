<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>排序算法</title>
      <link href="/2019/10/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/10/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>时间复杂度 <font color="Green"> O(n logn)</font></p><ul><li>基本思想：</li></ul><ol><li>数组中选择一个数字，作为基准pivot</li><li>比选择的数字小的数字移到数组的左边，比选择的数字大的数字移到数组的右边</li><li>此时带排序数组被基准原色分割为两部分，一部分数组的元素值小于pivot，另一部分数组的元素值大于pivot</li><li>分别对分割后的两部分继续进行快速排序，知道数组有序</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len, <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(data ==<span class="literal">nullptr</span> ||  len &lt;=<span class="number">0</span> || s &lt;<span class="number">0</span> || e &gt;= len)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">std</span>::exception(<span class="string">"Invalid Parameters"</span>);</span><br><span class="line"><span class="keyword">int</span> index = RandowInRange(s, e); <span class="comment">//生成一个在start-end之间的随机数</span></span><br><span class="line">swap(&amp;data[index],&amp;data[end]);    <span class="comment">//基准数字交换至数组末尾</span></span><br><span class="line"><span class="keyword">int</span> small = s <span class="number">-1</span>;    <span class="comment">//作为小于基准数字的的数在数组中的坐标</span></span><br><span class="line"><span class="keyword">for</span>(index = s; index &lt;e; ++index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(data[index] &lt; data[end])   <span class="comment">//找到小于基准数字的数</span></span><br><span class="line">&#123;</span><br><span class="line">++small;</span><br><span class="line"><span class="keyword">if</span>(small != index)      <span class="comment">//如果数不在小于基准数字的区间中，则把数字移至区间中</span></span><br><span class="line">swap(&amp;data[small],&amp;data[index]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">++ small;</span><br><span class="line">swap(&amp;data[small],&amp;data[end]);</span><br><span class="line"><span class="keyword">return</span> small;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start == end)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> index = partition(data, len, start, end);</span><br><span class="line"><span class="keyword">if</span>(index &gt; start)</span><br><span class="line">QuickSort(data, len, start , index<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(index &lt; end)</span><br><span class="line">QuickSort(data, len, index+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(arr, low ,high)</span>:</span></span><br><span class="line">    small = low - <span class="number">1</span></span><br><span class="line">    pivot = arr[high]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(low,high):</span><br><span class="line">        <span class="keyword">if</span> arr[j]&lt;= pivot:</span><br><span class="line">            small = small +<span class="number">1</span></span><br><span class="line">            arr[small],arr[j] = arr[j],arr[small]</span><br><span class="line">    arr[small +<span class="number">1</span>],arr[high] = arr[high],arr[small+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> small+<span class="number">1</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(arr, low, high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; high:</span><br><span class="line">        pi = partition(arr, low ,high)</span><br><span class="line">        quicksort(arr, low, pi <span class="number">-1</span>)</span><br><span class="line">        quicksort(arr, pi +<span class="number">1</span>, high)</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>时间复杂度：$O(n^2)$</p><ul><li>基本思想</li></ul><ol><li>在待排序数组中，自上而下比较相邻两个元素</li><li>每当相邻的元素它们的顺序与排序顺序相反时，交换</li></ol><ul><li>优化：</li></ul><p>当遍历一遍未排序数组没有发生交换时，此时数组已经为有序数组，可以终止排序。</p><ul><li>c++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubblesort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> flag = <span class="literal">false</span>;   <span class="comment">//标志一趟遍历是否发生交换</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len ; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--)  <span class="comment">//将较小的数向上冒</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(data[j] &lt; data[j<span class="number">-1</span>])</span><br><span class="line">      &#123;</span><br><span class="line">        swap(&amp;data[j],&amp;data[j<span class="number">-1</span>]);</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(!flag)  <span class="keyword">break</span>;    <span class="comment">//未发生交换，终止排序</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">  flag = <span class="literal">False</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">      <span class="keyword">if</span> arr[j]&lt;arr[j<span class="number">-1</span>]:</span><br><span class="line">        arr[j],arr[j<span class="number">-1</span>] = arr[j<span class="number">-1</span>],arr[j]</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">      <span class="keyword">return</span> arr</span><br><span class="line">   <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>算法复杂度：$O(n^2)$</p><ul><li>基本思想：</li></ul><ol><li>将数组第1个元素看出一个有序的子序列</li><li>从第2个元素开始，逐个插入子序列</li><li>直到插入数组所有元素</li></ol><ul><li>注意：</li></ul><ol><li>设置哨兵，相当于$O(1)$的额外空间。</li></ol><ul><li>c++:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertsort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len ; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> j = i<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = data[i];    <span class="comment">//设置哨兵，即带插入元素</span></span><br><span class="line">    <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; data[j])    <span class="comment">//找到插入位置</span></span><br><span class="line">    &#123;</span><br><span class="line">      data[j+<span class="number">1</span>] = data[j];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    data[j+<span class="number">1</span>] = temp;      <span class="comment">//插入哨兵</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Python:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertsort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        temp = arr[i]</span><br><span class="line">        j = i<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> temp &lt; arr[j] <span class="keyword">and</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">            arr[j+<span class="number">1</span>] = arr[j]</span><br><span class="line">            j = j <span class="number">-1</span></span><br><span class="line">        arr[j+<span class="number">1</span>] = temp</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>算法时间复杂度：$O(n^{1.3})$   这个1.3是个比较模糊的值，实际上指数具体数值并没有一个统一的取值，它取决于gap也就是增量的选择。一般gap=1就是直接插入排序。</p><ul><li>基本思想：</li></ul><ol><li>设置一个gap值，将待排序数组分为若干子序列，分别进行直接插入排序</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellinsert</span><span class="params">(<span class="keyword">int</span> data[],<span class="keyword">int</span> len, <span class="keyword">int</span> dk)</span>  <span class="comment">//根据dk将数组分组，分组进行直接插入排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = dk ; i &lt; len ; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = data[i];</span><br><span class="line">    <span class="keyword">int</span> j = i - dk;</span><br><span class="line">    <span class="keyword">while</span>(temp &lt; data[j] &amp;&amp; j &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      data[j+dk] = data[j];</span><br><span class="line">      j-=dk;</span><br><span class="line">    &#125;</span><br><span class="line">    data[j+dk] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellsort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> gap = n/<span class="number">2</span>; gap &gt; <span class="number">0</span> ; gap /= <span class="number">2</span>)</span><br><span class="line">    shellinsert(data,len,gap);    <span class="comment">//按照指数幂下降选择不同的gap，进行直接插入排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellsort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    n = len(arr)</span><br><span class="line">    gap = int(n/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> gap &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap,n):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i -gap</span><br><span class="line">            <span class="keyword">while</span> j&gt;=<span class="number">0</span> <span class="keyword">and</span> arr[j]&gt;temp:</span><br><span class="line">                arr[j+gap] = arr[j]</span><br><span class="line">                j = j - gap</span><br><span class="line">            arr[j+gap] = temp</span><br><span class="line">        gap = int(gap/<span class="number">2</span>)     <span class="comment">##测试的时候，代码没有加这一行，导致死循环</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h4><p>算法时间复杂度：$O(n^2)$</p><ul><li>基本思想：</li></ul><ol><li>在一组待排序数组中，选择最小或者最大的一个数与第1个位置的数进行交换；</li><li>在剩下的书中找最小或者最大的数与第2个位置的数进行交换</li><li>直到最后一个数为止。</li></ol><ul><li>c++:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectMin</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len, <span class="keyword">int</span> i)</span>   <span class="comment">//定义函数，在数组[i,len-1]范围中寻找最小元素下标，并返回</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> key = i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span> ; j &lt; len; j++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(data[key] &gt; data[j])</span><br><span class="line">      key = j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> key;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    key = selectMin(data,len,i);</span><br><span class="line">    swap(&amp;data[key],&amp;data[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Python:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectsort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        small = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i,len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[small] &gt; arr[j]:</span><br><span class="line">                small = j</span><br><span class="line">        arr[i],arr[small] = arr[small], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>算法时间复杂度：$O(n\log n)$</p><p>堆排序是采用二叉树进行排序的。</p><ul><li>基本思路（以大根堆为例）：</li></ul><ol><li>初始化堆，将数列[0,…,n-1]构造成最大化堆</li><li>交换数据，将a[0]与a[n-1]交换，使得a[n-1]是[0,…,n-1]中的最大值；然后将[0,…,n-2]重新调整为最大堆，此时a[0]是[0,…,n-2]中的最大值</li><li>将a[0]与a[n-2]交换，使得a[n-2]是[0,…,n-2]中的最大值</li><li>直到整个数组有序</li></ol><ul><li>最大化堆思路：</li></ul><ol><li>从数组中所有非叶子结点开始，按照自下向上的顺序最大化，$i = \frac{n}{2} - 1$</li><li>调整该非叶子结点和它的子节点使它成为大根堆</li></ol><ul><li>c++:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxheapdown</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> current = s;   <span class="comment">//当前根节点</span></span><br><span class="line">  <span class="keyword">int</span> child = <span class="number">2</span>*current +<span class="number">1</span>;    <span class="comment">//根节点值较大的儿子结点</span></span><br><span class="line">  <span class="keyword">for</span>(;current &lt;= e ;current = child, child = <span class="number">2</span>*child+<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(child+<span class="number">1</span> &lt;= e &amp;&amp; data[child] &lt; data[child+<span class="number">1</span>]) child++;   <span class="comment">//确定值较大的子节点</span></span><br><span class="line">    <span class="keyword">if</span>(data[child] &gt; data[current])    </span><br><span class="line">      swap(&amp;data[child],&amp;data[current]);</span><br><span class="line">    <span class="keyword">else</span>     <span class="comment">//否则说明该根堆已经是大根堆，不用再调整</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = len/<span class="number">2</span> <span class="number">-1</span>; i&lt;len; i++)</span><br><span class="line">     maxheapdown(data,i,len<span class="number">-1</span>);   <span class="comment">//最大化数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = len <span class="number">-1</span>; i &gt; <span class="number">0</span> ;i--)</span><br><span class="line">  &#123;</span><br><span class="line">    swap(&amp;data[<span class="number">0</span>],&amp;data[i]);   </span><br><span class="line">    maxheapdown(data,<span class="number">0</span>,i<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Python:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxheapdown</span><span class="params">(arr,start,end)</span>:</span></span><br><span class="line">    current = start</span><br><span class="line">    child = <span class="number">2</span>*current +<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> child &lt;= end:</span><br><span class="line">        <span class="keyword">if</span> child+<span class="number">1</span> &lt;= end <span class="keyword">and</span> arr[child] &lt; arr[child+<span class="number">1</span>]:</span><br><span class="line">            child = child+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> arr[child] &gt; arr[current]:</span><br><span class="line">            arr[child],arr[current] = arr[current],arr[child]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        current = child</span><br><span class="line">        child = <span class="number">2</span>*child+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapsort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    n = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (int(n/<span class="number">2</span>)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">        maxheapdown(arr,i,n<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (n<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        arr[<span class="number">0</span>],arr[i] = arr[i],arr[<span class="number">0</span>]</span><br><span class="line">        maxheapdown(arr,<span class="number">0</span>,i<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>算法时间复杂度：$O(n\log n)$</p><p>归并排序的形式就像二叉树，它需要遍历的次数就是二叉树的深度，是稳定的排序算法。</p><ul><li>基本思想：</li></ul><ol><li>将待排序数组分为若干个子序列</li><li>每个子序列是有序的，最小子序列长度为1</li><li>再将有序子序列merge为整体的有序序列</li></ol><ul><li>c++:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> data[],<span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> * rf = <span class="keyword">new</span> <span class="keyword">int</span>[right-left+<span class="number">1</span>];   <span class="comment">//用于merge两个数组的临时数组</span></span><br><span class="line">  <span class="keyword">int</span> i = left;</span><br><span class="line">  <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j &lt;= right)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(data[i] &lt; data[j])</span><br><span class="line">      rf[k++] = data[i++];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      rf[k++] = data[j++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">    rf[k++] = data[i++];</span><br><span class="line">  <span class="keyword">while</span>(j&lt;=right)</span><br><span class="line">    rf[k++] = data[j++];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span> ; a &lt; k;a++)</span><br><span class="line">    data[left+a] = rf[a];</span><br><span class="line">  <span class="keyword">delete</span> rf;      <span class="comment">//释放临时指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> data[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(data &amp;&amp; left &lt; right)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (right-left) / <span class="number">2</span>;</span><br><span class="line">    MergeSort(data,left,mid);</span><br><span class="line">    MergeSort(data,mid+<span class="number">1</span>,right);</span><br><span class="line">    Merge(data,left,mid,right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Python:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(arr,left,mid,right)</span>:</span></span><br><span class="line">    n1 = mid - left + <span class="number">1</span></span><br><span class="line">    n2 = right - mid</span><br><span class="line">    <span class="comment">#创建临时数组</span></span><br><span class="line">    temp = [<span class="number">0</span>]*(n1+n2)</span><br><span class="line">    i = left</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= right:</span><br><span class="line">        <span class="keyword">if</span> arr[i] &lt; arr[j]:</span><br><span class="line">            temp[k] = arr[i]</span><br><span class="line">            i = i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp[k] = arr[j]</span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">        k = k+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;= mid:</span><br><span class="line">        temp[k] = arr[i]</span><br><span class="line">        k = k +<span class="number">1</span></span><br><span class="line">        i = i +<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= right:</span><br><span class="line">        temp[k] = arr[j]</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>,k):</span><br><span class="line">        arr[left+a] = temp[a]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergesort</span><span class="params">(arr,left,right)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        mid = int ((right - left)/<span class="number">2</span>)+left</span><br><span class="line">        mergesort(arr,left,mid)</span><br><span class="line">        mergesort(arr,mid+<span class="number">1</span>,right)</span><br><span class="line">        merge(arr,left,mid,right)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer-fibonacci数列</title>
      <link href="/2019/10/01/%E5%89%91%E6%8C%87offer-fibonacci%E6%95%B0%E5%88%97/"/>
      <url>/2019/10/01/%E5%89%91%E6%8C%87offer-fibonacci%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目一-：-求Fibonacci数列的第n项"><a href="#题目一-：-求Fibonacci数列的第n项" class="headerlink" title="题目一 ： 求Fibonacci数列的第n项"></a>题目一 ： 求Fibonacci数列的第n项</h2><blockquote><p>写一个函数，输入n，求Fibonacci数列的第n项。</p></blockquote><h3 id="thinking"><a href="#thinking" class="headerlink" title="thinking:"></a>thinking:</h3><blockquote><p>根据Fibonacci数列的定义，我们最先联想到的就是递归函数的使用。在上算法课学习递归时，老师也是通过举Fibonacci的列子来介绍递归。但是，递归方法计算的时间复杂度是以n的指数的方式递增的，当n=100时，计算时间就已经很长了，如果n很大，很可能会爆栈。<br>优化递归的方法，使用<font color="CornflowerBlue"> 循环迭代 </font>消除递归。</p></blockquote><h4 id="方法一：-避免重复计算，从下往上计算"><a href="#方法一：-避免重复计算，从下往上计算" class="headerlink" title="方法一： 避免重复计算，从下往上计算"></a>方法一： 避免重复计算，从下往上计算</h4><p>复杂度：<font color="green"> O(n) </font></p><ul><li>C++:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> result[n];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> fn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;=n ; i++)</span><br><span class="line">&#123;</span><br><span class="line">fn = f1+f2;</span><br><span class="line">f1 = f2;</span><br><span class="line">f2 = fn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;<span class="number">2</span> :</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n + <span class="number">1</span>):</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h4 id="方法二：避免重复计算，使用记录数组"><a href="#方法二：避免重复计算，使用记录数组" class="headerlink" title="方法二：避免重复计算，使用记录数组"></a>方法二：避免重复计算，使用记录数组</h4><h4 id="方法三：矩阵算法"><a href="#方法三：矩阵算法" class="headerlink" title="方法三：矩阵算法"></a>方法三：矩阵算法</h4><p>复杂度：<font color="green"> O(log n) </font></p><h2 id="题目二：青蛙跳台阶问题"><a href="#题目二：青蛙跳台阶问题" class="headerlink" title="题目二：青蛙跳台阶问题"></a>题目二：青蛙跳台阶问题</h2><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上n级台阶总共有多少种跳法。<br>我刚看到这道题的时候，没有想到与fibonacci数列的公式相类似。看了书上详细的分析：<br>*<font color="blue">如果只有1级台阶，那显然只有一种跳法。如果有2级台阶，那就有两种跳法：一种是分两次跳，每次跳1级；另一种就是一次跳2级。我们把n级台阶时的跳法看出n的函数，记为f(n)。当n&gt;2时，第一次跳的时候就有两种不同的选择：一是第一次只跳1级，此时跳法数目等于后面剩下的n-1级台阶的跳法数目，即为f(n-1);二是第一次跳2级，此时跳法数目等于后面剩下的n-2级台阶的跳法数目，即为f(n-2)。因此，n级台阶的不同跳法的总数f(n) = f(n-1)+f(n-2)。</font>*</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式转义自字符在Hive+Shell中的特殊注意</title>
      <link href="/2019/09/14/hive-shell%E6%AD%A3%E5%88%99%E8%BD%AC%E4%B9%89/"/>
      <url>/2019/09/14/hive-shell%E6%AD%A3%E5%88%99%E8%BD%AC%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h2 id="hive中"><a href="#hive中" class="headerlink" title="hive中"></a>hive中</h2><ul><li>正则表达式的转移字符为<em>双斜线“\\”</em></li><li>spilt(string str, string pat),分割符pat为正则表达式<ul><li>待分割字符串：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> positions <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>使用分割符“|”分割开</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(positions,<span class="string">'|'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure><p>发现，“|”也作为列表的一部分。这是因为，之间使用‘|’被默认为正则表达式中的或，而不会被作为分隔符使用，这时，分隔符为空，所以split函数将字段<em>positions</em>中的单个字符全部分隔开。</p><blockquote><p>使用“\\”转义字符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(positions,<span class="string">'\\|'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure><blockquote><p>在“[]”中拼接处字符串<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(positions,<span class="string">'[|]'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="转义“转义字符”"><a href="#转义“转义字符”" class="headerlink" title="转义“转义字符”"></a>转义“转义字符”</h2><ul><li>有时候，在一些特殊情况下，需要对’&#39;进行转义，会出现两个’\\‘或者四个’\\\\‘转义字符</li><li></li></ul><ol><li>hive的split函数和正则表达式<blockquote><p>当以“\”作为分隔符的话，那么就需要使用四个斜线“\\”，</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">split</span>(<span class="string">'a\b\c'</span>,<span class="string">'\\\\'</span>) <span class="keyword">from</span> [表名] <span class="keyword">where</span> [分区条件];</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>hive语句在shell脚本中执行<blockquote><p>shell中’&#39;是特殊字符，也需要转义，shell的转义字符是一个”&quot;。<br>hive 语句在shell脚本中执行时，就需要由shell转义后，再由hive执行。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">SQL="</span><br><span class="line">select split(positions,'\\|') from [表名] where [分区条件];</span><br><span class="line">"</span><br><span class="line">echo -e '$&#123;SQL&#125;'</span><br><span class="line">hive -e '$&#123;SQL&#125;'</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则转义,hive,shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计文件行数</title>
      <link href="/2019/09/14/%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E8%A1%8C%E6%95%B0/"/>
      <url>/2019/09/14/%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E8%A1%8C%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>今天做一个报表需求，供算法团队使用，想和旧数据比较量级，就学习一些linux的一些语法操作。总结记录，下次直接用。</p><h2 id="使用awk的特殊变量"><a href="#使用awk的特殊变量" class="headerlink" title="使用awk的特殊变量"></a>使用awk的特殊变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;print NR&#125;' 文件名 | tail -n1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk 'END&#123;print NR&#125;' 文件名</span><br></pre></td></tr></table></figure><h2 id="使用grep列出行号"><a href="#使用grep列出行号" class="headerlink" title="使用grep列出行号"></a>使用grep列出行号</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n '' 文件名 | awk -F : 'print $1' | tail -n1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n '' 文件名 | awk -F : 'END&#123;print $1&#125;'</span><br></pre></td></tr></table></figure><h2 id="使用sed流编辑-n"><a href="#使用sed流编辑-n" class="headerlink" title="使用sed流编辑-n"></a>使用sed流编辑-n</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n '$=' 文件名</span><br></pre></td></tr></table></figure><p>-解释： sed -n ‘$=’, “$”命令到最后一行，”=”打印行号</p><h2 id="使用wc命令"><a href="#使用wc命令" class="headerlink" title="使用wc命令"></a>使用wc命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 文件名|wc -l</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l 文件名|awk '&#123;print $1&#125;'</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“剑指Offer-数组”</title>
      <link href="/2019/09/14/%E2%80%9C%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E2%80%9D/"/>
      <url>/2019/09/14/%E2%80%9C%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="题目一：-找出数组中重复的数字"><a href="#题目一：-找出数组中重复的数字" class="headerlink" title="题目一： 找出数组中重复的数字"></a>题目一： 找出数组中重复的数字</h2><p>在一个<span style="border-bottom:2px dashed green;"><strong>长度为n的数组里所有的数字都在0～n-1的范围内</strong></span>。数组中某些数字是重复的，但不知道有几个数字重复了,也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2,3,1,0,2,5,3},那么对应的输出是重复的数字2或者3。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol><li>使用哈希表。<blockquote><p><font color="Green">如果哈希表里没有这个数字，就把它加入哈希表，如果哈希表里已经存在该数字，就找到一个重复的数字。</font><br><font color="Blue">时间复杂度O(n)；空间复杂度O(n)。</font></p></blockquote></li><li>注意到题目画绿线部分的特殊性。<blockquote><p><font color="Green">特别的：如果这个数组没有重复数字，那么当数组排序之后数字i将出现在下标为i的位置。</font></p></blockquote></li></ol><ul><li>重排序数组，从头到尾扫描数组中的每个数字</li><li>当扫描到下标为i的数组时，首先比较这个数字（m）是否等于下标 i</li><li>如果是，则扫描下一个数字；</li><li>否则，拿数字m和数组第m个数字进行比较。如果它和m相等，找到重复数字。如果不等，就将数组第i个数字与数组第m个数字交换位置。</li><li>重复比较、交换，直到发现重复数字。</li></ul><p><font color="Blue">时间复杂度O(n),空间复杂度O(1)。</font></p><ul><li><p>C++代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers == <span class="literal">nullptr</span> || length &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;                                 <span class="comment">//判断数组是否为空</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length ; i++)          <span class="comment">//判断数组元素是否满足题目要求</span></span><br><span class="line"><span class="keyword">if</span>(numbers[i] &lt; <span class="number">0</span> || numbers[i] &gt;= length) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(numbers[i] != i)        <span class="comment">//判断第i个元素与下标是否相等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers[i] == numbers[numbers[i]])      <span class="comment">//m等于第m个元素的值，找到重复数字</span></span><br><span class="line">&#123;</span><br><span class="line">*duplication = numbers[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">swap(numbers[i],numbers[numbers[i]]);       <span class="comment">//交换数组第i个数字和第m个数字</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">duplicate</span><span class="params">(a,dup)</span>:</span></span><br><span class="line">    long = len(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(long):</span><br><span class="line">        <span class="keyword">while</span> i != a[i]:</span><br><span class="line">            x =a [i]</span><br><span class="line">            <span class="keyword">if</span> x == a[x]:</span><br><span class="line">                dup[<span class="number">0</span>] = x</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            a[i], a[x] = a[x], a[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>测试：<br><img src="/.com//_posts/%E2%80%9C%E5%89%91%E6%8C%87Offer-%E6%95%B0%E7%BB%84%E2%80%9D/test1.png" alt="test1"></p><img src="/.com//09/14/“剑指Offer-数组”/test1.png" title="This is an example image"></li></ul><h2 id="题目二：不修改数组找出重复的数字"><a href="#题目二：不修改数组找出重复的数字" class="headerlink" title="题目二：不修改数组找出重复的数字"></a>题目二：不修改数组找出重复的数字</h2><p>在<span style="border-bottom:2px dashed green;"><strong>一个长度为n+1的数组里的所有数字都在1～n的范围内，所以数组中至少有一个数字是重复的</strong></span>。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2,3,5,4,3,2,6,7},那么对应的输出是重复的数字2或3。</p><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>这个题目和题目一的区别就是，不能修改原数组。</p><ol><li>复制数组，使用O(n)的辅助空间。</li><li>如果不修改数组，其实就是限制你对数组的权限是只读，也就是查找数组。如果只能查找数组，就可以利用<font color="Green">二分查找的思想。再利用题目的特殊性，如果没有重复数字，数组中元组值在1～n的数字一定只有n个，由于数组包含&gt;n个元素，所以一定包含重复数字，接下来就不断缩小包含的重复数字的数组范围。</font></li></ol><ul><li><p>把1～n的数字折半中间数字索引为m，前一半1～m，后一半m+1~n。</p></li><li><p>判断：如果1～m的数字数目超过m，那么这一半的区间里一定包含重复数字；<br>否则，就是另一半。</p></li><li><p>重复，直到找到重复的数字。<strong>（过程比较二分查找，就是多了一个统计区间中数字的数目）</strong><br><font color="Blue"> 时间复杂度O(log n), 空间复杂度O(1)</font></p></li><li><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countRange</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> * numbers, <span class="keyword">int</span> length, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers == <span class="literal">nullptr</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line"><span class="keyword">if</span>(numbers[i] &gt;= start &amp;&amp; numbers[i] &lt;= end)</span><br><span class="line">count ++;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDuplication</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> * numbers, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(numbers == <span class="literal">nullptr</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>;            <span class="comment">//初始化查找区间范围</span></span><br><span class="line"><span class="keyword">int</span> end = length <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(start &lt;= end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = ((end -start)&gt;&gt;<span class="number">1</span>) +start;  <span class="comment">//折半中间</span></span><br><span class="line"><span class="keyword">int</span> count = countRange(numbers, length, start,middle)   <span class="comment">//从start-middle左半开始统计个数</span></span><br><span class="line"><span class="keyword">if</span>(end == start)    <span class="comment">//折半到最小区间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">1</span>)   <span class="comment">//重复数字</span></span><br><span class="line"><span class="keyword">return</span> start;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count &gt; (middle-start + <span class="number">1</span>))     <span class="comment">//重复数字在左半部分，继续查找</span></span><br><span class="line">end = middle;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">start = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">countRange</span><span class="params">(self,numbers, length, start, end)</span>:</span>   <span class="comment">#计数</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">            <span class="keyword">if</span> numbers[i] &gt;= start <span class="keyword">and</span> numbers[i] &lt;= end:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDuplication</span><span class="params">(self,numbers)</span>:</span></span><br><span class="line">        length = len(numbers)</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = length <span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> end &gt;= start:</span><br><span class="line">            middle = ((end-start)&gt;&gt;<span class="number">1</span>) + start</span><br><span class="line">            count = self.countRange(numbers, length, start, middle)</span><br><span class="line">            <span class="keyword">if</span> start == end:</span><br><span class="line">                <span class="keyword">if</span> count &gt; <span class="number">1</span>: </span><br><span class="line">                    <span class="keyword">return</span> start</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; (middle - start ) + <span class="number">1</span> :</span><br><span class="line">                end = middle</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                start = middle + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">ss = Solution()</span><br><span class="line">lst = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">ss.getDuplication(lst)</span><br></pre></td></tr></table></figure></li></ul><h2 id="题目三：-二维数组中的查找"><a href="#题目三：-二维数组中的查找" class="headerlink" title="题目三： 二维数组中的查找"></a>题目三： 二维数组中的查找</h2><p>在一个二维数组中，<span style="border-bottom:2px dashed green;">每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序</span>。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>利用二维数组是一个特殊有序的二维数组，通过查找一个数不断缩小查找范围的思想（类似二分查找的思想），选择中间值，比较然后缩小范围。<br>中间值：一位数组通常是折半。二维数组可以找右上角，左边的数字都小于右上角数字，下边的数字都大于右上角数字。</p><ul><li><p>选取数组中右上角的数字。</p></li><li><p>如果该数字等于要查找的数字，则查找过程结束；</p></li><li><p>如果该数字大于要查找的数字，则剔除这个数字所在的列；</p></li><li><p>如果该数字小于要查找的数字，则剔除这个数字所在的行。</p></li><li><p>C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> *matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">0</span>, col = cols <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(row &lt; rows &amp;&amp; col &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[row*cols + col] == num)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(matrix[row*cols+col] &gt; num)</span><br><span class="line">col--;                                             <span class="comment">//剔除所在列</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">row++;                                           <span class="comment">//剔除所在行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> found;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>-Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(matrix,num)</span>:</span></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    col = len(matrix[<span class="number">0</span>])<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> matrix == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> row &lt; len(matrix) <span class="keyword">and</span> col &gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> matrix[row][col] == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> matrix[row][col] &gt; num:</span><br><span class="line">            col -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer, 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac删除GlobalProtect</title>
      <link href="/2019/09/10/mac%E5%88%A0%E9%99%A4GlobalProtect/"/>
      <url>/2019/09/10/mac%E5%88%A0%E9%99%A4GlobalProtect/</url>
      
        <content type="html"><![CDATA[<h4 id="之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。"><a href="#之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。" class="headerlink" title="之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。"></a>之前不得已安装了GlobalProtect，现在想要删掉。使用普通mac删除软件的方法发现不行，所以就在网上查找了一个方法。</h4><ol><li>打开终端</li><li>输入终端命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/GlobalProtect.app/Contents/Resources/uninstall_gp.sh</span><br></pre></td></tr></table></figure></li></ol><p>3.完成删除。</p>]]></content>
      
      
      <categories>
          
          <category> install &amp;&amp; uninstall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
